(function() {var implementors = {};
implementors["glib"] = [{"text":"impl Sub&lt;FileTest&gt; for FileTest","synthetic":false,"types":[]},{"text":"impl Sub&lt;FormatSizeFlags&gt; for FormatSizeFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;IOCondition&gt; for IOCondition","synthetic":false,"types":[]},{"text":"impl Sub&lt;KeyFileFlags&gt; for KeyFileFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;LogLevelFlags&gt; for LogLevelFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;OptionFlags&gt; for OptionFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SpawnFlags&gt; for SpawnFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;BindingFlags&gt; for BindingFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ParamFlags&gt; for ParamFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SignalFlags&gt; for SignalFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;LogLevels&gt; for LogLevels","synthetic":false,"types":[]}];
implementors["gstreamer"] = [{"text":"impl Sub&lt;BinFlags&gt; for BinFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;BufferCopyFlags&gt; for BufferCopyFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;BufferFlags&gt; for BufferFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;BufferPoolAcquireFlags&gt; for BufferPoolAcquireFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ClockFlags&gt; for ClockFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;DebugColorFlags&gt; for DebugColorFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;DebugGraphDetails&gt; for DebugGraphDetails","synthetic":false,"types":[]},{"text":"impl Sub&lt;ElementFlags&gt; for ElementFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;MemoryFlags&gt; for MemoryFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ObjectFlags&gt; for ObjectFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;PadFlags&gt; for PadFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;PadLinkCheck&gt; for PadLinkCheck","synthetic":false,"types":[]},{"text":"impl Sub&lt;PadProbeType&gt; for PadProbeType","synthetic":false,"types":[]},{"text":"impl Sub&lt;ParseFlags&gt; for ParseFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;PipelineFlags&gt; for PipelineFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;PluginDependencyFlags&gt; for PluginDependencyFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;PluginFlags&gt; for PluginFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SchedulingFlags&gt; for SchedulingFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SeekFlags&gt; for SeekFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SegmentFlags&gt; for SegmentFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;StreamFlags&gt; for StreamFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;Fraction&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Sub&lt;Fraction&gt; for &amp;'_ Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Sub&lt;&amp;'_ Fraction&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_, '_&gt; Sub&lt;&amp;'_ Fraction&gt; for &amp;'_ Fraction","synthetic":false,"types":[]},{"text":"impl Sub&lt;i32&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Sub&lt;i32&gt; for &amp;'_ Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Sub&lt;&amp;'_ i32&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_, '_&gt; Sub&lt;&amp;'_ i32&gt; for &amp;'_ Fraction","synthetic":false,"types":[]},{"text":"impl Sub&lt;Fraction&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Sub&lt;&amp;'_ Fraction&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Sub&lt;Fraction&gt; for &amp;'_ i32","synthetic":false,"types":[]},{"text":"impl&lt;'_, '_&gt; Sub&lt;&amp;'_ Fraction&gt; for &amp;'_ i32","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for TypeFindProbability","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for Rank","synthetic":false,"types":[]},{"text":"impl Sub&lt;Default&gt; for Default","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Default&gt; for Default","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Default&gt; for &amp;'a Default","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Default&gt; for &amp;'b Default","synthetic":false,"types":[]},{"text":"impl Sub&lt;Bytes&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Bytes&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Bytes&gt; for &amp;'a Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Bytes&gt; for &amp;'b Bytes","synthetic":false,"types":[]},{"text":"impl Sub&lt;ClockTime&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a ClockTime&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;ClockTime&gt; for &amp;'a ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a ClockTime&gt; for &amp;'b ClockTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;Buffers&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Buffers&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Buffers&gt; for &amp;'a Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Buffers&gt; for &amp;'b Buffers","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Sub&lt;&amp;'b Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Sub&lt;&amp;'b T&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;T&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;&amp;'a T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Sub&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Sub&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()