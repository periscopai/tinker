(function() {var implementors = {};
implementors["gstreamer"] = [{"text":"impl Rem&lt;Fraction&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Rem&lt;Fraction&gt; for &amp;'_ Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Rem&lt;&amp;'_ Fraction&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_, '_&gt; Rem&lt;&amp;'_ Fraction&gt; for &amp;'_ Fraction","synthetic":false,"types":[]},{"text":"impl Rem&lt;i32&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Rem&lt;i32&gt; for &amp;'_ Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Rem&lt;&amp;'_ i32&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;'_, '_&gt; Rem&lt;&amp;'_ i32&gt; for &amp;'_ Fraction","synthetic":false,"types":[]},{"text":"impl Rem&lt;Fraction&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Rem&lt;&amp;'_ Fraction&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Rem&lt;Fraction&gt; for &amp;'_ i32","synthetic":false,"types":[]},{"text":"impl&lt;'_, '_&gt; Rem&lt;&amp;'_ Fraction&gt; for &amp;'_ i32","synthetic":false,"types":[]},{"text":"impl Rem&lt;Default&gt; for Default","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a Default&gt; for Default","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;Default&gt; for &amp;'a Default","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a Default&gt; for &amp;'b Default","synthetic":false,"types":[]},{"text":"impl Rem&lt;u64&gt; for Default","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a u64&gt; for Default","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;u64&gt; for &amp;'a Default","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a u64&gt; for &amp;'b Default","synthetic":false,"types":[]},{"text":"impl Rem&lt;Default&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a Default&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;Default&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a Default&gt; for &amp;'b u64","synthetic":false,"types":[]},{"text":"impl Rem&lt;Bytes&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a Bytes&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;Bytes&gt; for &amp;'a Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a Bytes&gt; for &amp;'b Bytes","synthetic":false,"types":[]},{"text":"impl Rem&lt;u64&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a u64&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;u64&gt; for &amp;'a Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a u64&gt; for &amp;'b Bytes","synthetic":false,"types":[]},{"text":"impl Rem&lt;Bytes&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a Bytes&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;Bytes&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a Bytes&gt; for &amp;'b u64","synthetic":false,"types":[]},{"text":"impl Rem&lt;ClockTime&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a ClockTime&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;ClockTime&gt; for &amp;'a ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a ClockTime&gt; for &amp;'b ClockTime","synthetic":false,"types":[]},{"text":"impl Rem&lt;u64&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a u64&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;u64&gt; for &amp;'a ClockTime","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a u64&gt; for &amp;'b ClockTime","synthetic":false,"types":[]},{"text":"impl Rem&lt;ClockTime&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a ClockTime&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;ClockTime&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a ClockTime&gt; for &amp;'b u64","synthetic":false,"types":[]},{"text":"impl Rem&lt;Buffers&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a Buffers&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;Buffers&gt; for &amp;'a Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a Buffers&gt; for &amp;'b Buffers","synthetic":false,"types":[]},{"text":"impl Rem&lt;u64&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a u64&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;u64&gt; for &amp;'a Buffers","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a u64&gt; for &amp;'b Buffers","synthetic":false,"types":[]},{"text":"impl Rem&lt;Buffers&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;&amp;'a Buffers&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Rem&lt;Buffers&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Rem&lt;&amp;'a Buffers&gt; for &amp;'b u64","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Rem&lt;&amp;'b Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Rem&lt;&amp;'b T&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Rem&lt;Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Rem&lt;T&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Rem&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Rem&lt;&amp;'a T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Rem&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Rem&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()