(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl From&lt;Colour&gt; for Style","synthetic":false,"types":[]},{"text":"impl&lt;'a, I, S:&nbsp;'a + ToOwned + ?Sized&gt; From&lt;I&gt; for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Into&lt;Cow&lt;'a, S&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl&lt;E&gt; From&lt;E&gt; for Error <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: StdError + Send + Sync + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Box&lt;dyn StdError + Send + Sync + 'static&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Box&lt;dyn StdError + Send + 'static&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Box&lt;dyn StdError + 'static&gt;","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b, 'z&gt; From&lt;&amp;'z Arg&lt;'a, 'b&gt;&gt; for Arg&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'z&gt; From&lt;&amp;'z ArgGroup&lt;'a&gt;&gt; for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; From&lt;Result&lt;R, L&gt;&gt; for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl&lt;'a, T&gt; From&lt;FutureObj&lt;'a, T&gt;&gt; for LocalFutureObj&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&lt;Output = ()&gt; + Send + 'a&gt; From&lt;Box&lt;F, Global&gt;&gt; for FutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Box&lt;dyn Future&lt;Output = ()&gt; + 'a + Send, Global&gt;&gt; for FutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&lt;Output = ()&gt; + Send + 'a&gt; From&lt;Pin&lt;Box&lt;F, Global&gt;&gt;&gt; for FutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Pin&lt;Box&lt;dyn Future&lt;Output = ()&gt; + 'a + Send, Global&gt;&gt;&gt; for FutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&lt;Output = ()&gt; + 'a&gt; From&lt;Box&lt;F, Global&gt;&gt; for LocalFutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Box&lt;dyn Future&lt;Output = ()&gt; + 'a, Global&gt;&gt; for LocalFutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&lt;Output = ()&gt; + 'a&gt; From&lt;Pin&lt;Box&lt;F, Global&gt;&gt;&gt; for LocalFutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Pin&lt;Box&lt;dyn Future&lt;Output = ()&gt; + 'a, Global&gt;&gt;&gt; for LocalFutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;T&gt; From&lt;Option&lt;T&gt;&gt; for OptionFuture&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Mutex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["glib"] = [{"text":"impl&lt;T:&nbsp;ObjectType&gt; From&lt;WeakRef&lt;T&gt;&gt; for SendWeakRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Borrow&lt;[u8]&gt; + 'a&gt; From&lt;&amp;'a T&gt; for ByteArray","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Borrow&lt;[u8]&gt; + 'a&gt; From&lt;&amp;'a T&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Char&gt; for char","synthetic":false,"types":[]},{"text":"impl From&lt;UChar&gt; for char","synthetic":false,"types":[]},{"text":"impl From&lt;GString&gt; for String","synthetic":false,"types":[]},{"text":"impl From&lt;GString&gt; for Box&lt;str&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for GString","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;str, Global&gt;&gt; for GString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for GString","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8&gt;&gt; for GString","synthetic":false,"types":[]},{"text":"impl From&lt;CString&gt; for GString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a CStr&gt; for GString","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + SetValueOptional&gt; From&lt;Option&lt;&amp;'a T&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + SetValue&gt; From&lt;&amp;'a T&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;TypedValue&lt;T&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;SendValue&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;FromValueOptional&lt;'a&gt; + SetValueOptional&gt; From&lt;Option&lt;&amp;'a T&gt;&gt; for TypedValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;FromValueOptional&lt;'a&gt; + SetValue&gt; From&lt;&amp;'a T&gt; for TypedValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Option&lt;&amp;'a str&gt;&gt; for TypedValue&lt;String&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for TypedValue&lt;String&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;TypedValue&lt;&amp;'a str&gt;&gt; for TypedValue&lt;String&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;TypedValue&lt;String&gt;&gt; for TypedValue&lt;&amp;'a str&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + SetValueOptional + Send&gt; From&lt;Option&lt;&amp;'a T&gt;&gt; for SendValue","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + SetValue + Send&gt; From&lt;&amp;'a T&gt; for SendValue","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; From&lt;TypedValue&lt;T&gt;&gt; for SendValue","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ToVariant&gt; From&lt;T&gt; for Variant","synthetic":false,"types":[]},{"text":"impl From&lt;Variant&gt; for VariantDict","synthetic":false,"types":[]}];
implementors["gstreamer"] = [{"text":"impl From&lt;BoolError&gt; for LoggableError","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl From&lt;(i32, i32)&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl From&lt;Ratio&lt;i32&gt;&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl From&lt;Fraction&gt; for Rational32","synthetic":false,"types":[]},{"text":"impl From&lt;(i32, i32)&gt; for IntRange&lt;i32&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;(i32, i32, i32)&gt; for IntRange&lt;i32&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;(i64, i64)&gt; for IntRange&lt;i64&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;(i64, i64, i64)&gt; for IntRange&lt;i64&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;(Fraction, Fraction)&gt; for FractionRange","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Bitmask","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [&amp;'a (dyn ToSendValue + 'a)]&gt; for Array&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [SendValue]&gt; for Array&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [&amp;'a (dyn ToSendValue + 'a)]&gt; for List&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [SendValue]&gt; for List&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Position&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Duration&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Latency&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Seeking&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Segment&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Convert&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Formats&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Buffering&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Custom&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Uri&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Allocation&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Scheduling&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;AcceptCaps&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Caps&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Drain&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Context&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Bitrate&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;Other&lt;Query&gt;&gt; for Query","synthetic":false,"types":[]},{"text":"impl From&lt;GstAllocationParams&gt; for AllocationParams","synthetic":false,"types":[]},{"text":"impl From&lt;Duration&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl From&lt;StateChangeSuccess&gt; for StateChangeReturn","synthetic":false,"types":[]},{"text":"impl From&lt;StateChangeError&gt; for StateChangeReturn","synthetic":false,"types":[]},{"text":"impl From&lt;Result&lt;StateChangeSuccess, StateChangeError&gt;&gt; for StateChangeReturn","synthetic":false,"types":[]},{"text":"impl From&lt;FlowSuccess&gt; for FlowReturn","synthetic":false,"types":[]},{"text":"impl From&lt;FlowError&gt; for FlowReturn","synthetic":false,"types":[]},{"text":"impl From&lt;Result&lt;FlowSuccess, FlowError&gt;&gt; for FlowReturn","synthetic":false,"types":[]},{"text":"impl From&lt;PadLinkSuccess&gt; for PadLinkReturn","synthetic":false,"types":[]},{"text":"impl From&lt;PadLinkError&gt; for PadLinkReturn","synthetic":false,"types":[]},{"text":"impl From&lt;Result&lt;PadLinkSuccess, PadLinkError&gt;&gt; for PadLinkReturn","synthetic":false,"types":[]},{"text":"impl From&lt;ClockSuccess&gt; for ClockReturn","synthetic":false,"types":[]},{"text":"impl From&lt;ClockError&gt; for ClockReturn","synthetic":false,"types":[]},{"text":"impl From&lt;Result&lt;ClockSuccess, ClockError&gt;&gt; for ClockReturn","synthetic":false,"types":[]},{"text":"impl From&lt;Default&gt; for GenericFormattedValue","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Default","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;u64&gt;&gt; for Default","synthetic":false,"types":[]},{"text":"impl From&lt;Bytes&gt; for GenericFormattedValue","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;u64&gt;&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;ClockTime&gt; for GenericFormattedValue","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;u64&gt;&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl From&lt;Buffers&gt; for GenericFormattedValue","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;u64&gt;&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl From&lt;Undefined&gt; for GenericFormattedValue","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Undefined","synthetic":false,"types":[]},{"text":"impl From&lt;Percent&gt; for GenericFormattedValue","synthetic":false,"types":[]},{"text":"impl From&lt;FlowError&gt; for FlowReturn","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a FlowError&gt; for FlowReturn","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;A:&nbsp;IntoIterator&gt; From&lt;(A,)&gt; for Zip&lt;(A::IntoIter,)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator&gt; From&lt;(A, B)&gt; for Zip&lt;(A::IntoIter, B::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator&gt; From&lt;(A, B, C)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator, E:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D, E)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter, E::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator, E:&nbsp;IntoIterator, F:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D, E, F)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter, E::IntoIter, F::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator, E:&nbsp;IntoIterator, F:&nbsp;IntoIterator, G:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D, E, F, G)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter, E::IntoIter, F::IntoIter, G::IntoIter)&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;IntoIterator, B:&nbsp;IntoIterator, C:&nbsp;IntoIterator, D:&nbsp;IntoIterator, E:&nbsp;IntoIterator, F:&nbsp;IntoIterator, G:&nbsp;IntoIterator, H:&nbsp;IntoIterator&gt; From&lt;(A, B, C, D, E, F, G, H)&gt; for Zip&lt;(A::IntoIter, B::IntoIter, C::IntoIter, D::IntoIter, E::IntoIter, F::IntoIter, G::IntoIter, H::IntoIter)&gt;","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R:&nbsp;RawMutex, T&gt; From&lt;T&gt; for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex, G:&nbsp;GetThreadId, T&gt; From&lt;T&gt; for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock, T&gt; From&lt;T&gt; for RwLock&lt;R, T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;(T, T)&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl From&lt;Span&gt; for Span","synthetic":false,"types":[]},{"text":"impl From&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;Group&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Ident&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Punct&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for TokenTree","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl From&lt;Error&gt; for Diagnostic","synthetic":false,"types":[]}];
implementors["pyo3"] = [{"text":"impl From&lt;PyErr&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;'static + Send + Sync + Debug&gt; From&lt;IntoInnerError&lt;W&gt;&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromSliceError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ParseIntError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ParseFloatError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromIntError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;ParseBoolError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;IntoStringError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;NulError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;FromUtf8Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;FromUtf16Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;DecodeUtf16Error&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;AddrParseError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;PyDowncastError&lt;'a&gt;&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBaseException&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyBaseException&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBaseException&gt; for Py&lt;PyBaseException&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyException&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyException&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyException&gt; for Py&lt;PyException&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyStopAsyncIteration&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyStopAsyncIteration&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyStopAsyncIteration&gt; for Py&lt;PyStopAsyncIteration&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyStopIteration&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyStopIteration&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyStopIteration&gt; for Py&lt;PyStopIteration&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyGeneratorExit&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyGeneratorExit&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyGeneratorExit&gt; for Py&lt;PyGeneratorExit&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyArithmeticError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyArithmeticError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyArithmeticError&gt; for Py&lt;PyArithmeticError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyLookupError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyLookupError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyLookupError&gt; for Py&lt;PyLookupError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyAssertionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyAssertionError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyAssertionError&gt; for Py&lt;PyAssertionError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyAttributeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyAttributeError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyAttributeError&gt; for Py&lt;PyAttributeError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBufferError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyBufferError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBufferError&gt; for Py&lt;PyBufferError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyEOFError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyEOFError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyEOFError&gt; for Py&lt;PyEOFError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFloatingPointError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyFloatingPointError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFloatingPointError&gt; for Py&lt;PyFloatingPointError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyOSError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyOSError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyOSError&gt; for Py&lt;PyOSError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyImportError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyImportError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyImportError&gt; for Py&lt;PyImportError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyModuleNotFoundError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyModuleNotFoundError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyModuleNotFoundError&gt; for Py&lt;PyModuleNotFoundError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyIndexError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyIndexError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyIndexError&gt; for Py&lt;PyIndexError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyKeyError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyKeyError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyKeyError&gt; for Py&lt;PyKeyError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyKeyboardInterrupt&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyKeyboardInterrupt&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyKeyboardInterrupt&gt; for Py&lt;PyKeyboardInterrupt&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyMemoryError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyMemoryError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyMemoryError&gt; for Py&lt;PyMemoryError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyNameError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyNameError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyNameError&gt; for Py&lt;PyNameError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyOverflowError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyOverflowError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyOverflowError&gt; for Py&lt;PyOverflowError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyRuntimeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyRuntimeError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyRuntimeError&gt; for Py&lt;PyRuntimeError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyRecursionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyRecursionError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyRecursionError&gt; for Py&lt;PyRecursionError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyNotImplementedError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyNotImplementedError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyNotImplementedError&gt; for Py&lt;PyNotImplementedError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PySyntaxError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PySyntaxError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PySyntaxError&gt; for Py&lt;PySyntaxError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyReferenceError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyReferenceError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyReferenceError&gt; for Py&lt;PyReferenceError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PySystemError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PySystemError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PySystemError&gt; for Py&lt;PySystemError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PySystemExit&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PySystemExit&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PySystemExit&gt; for Py&lt;PySystemExit&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyTypeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyTypeError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyTypeError&gt; for Py&lt;PyTypeError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnboundLocalError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyUnboundLocalError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnboundLocalError&gt; for Py&lt;PyUnboundLocalError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnicodeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyUnicodeError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnicodeError&gt; for Py&lt;PyUnicodeError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnicodeDecodeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyUnicodeDecodeError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnicodeDecodeError&gt; for Py&lt;PyUnicodeDecodeError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnicodeEncodeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyUnicodeEncodeError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnicodeEncodeError&gt; for Py&lt;PyUnicodeEncodeError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnicodeTranslateError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyUnicodeTranslateError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyUnicodeTranslateError&gt; for Py&lt;PyUnicodeTranslateError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyValueError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyValueError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyValueError&gt; for Py&lt;PyValueError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyZeroDivisionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyZeroDivisionError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyZeroDivisionError&gt; for Py&lt;PyZeroDivisionError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBlockingIOError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyBlockingIOError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBlockingIOError&gt; for Py&lt;PyBlockingIOError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBrokenPipeError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyBrokenPipeError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBrokenPipeError&gt; for Py&lt;PyBrokenPipeError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyChildProcessError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyChildProcessError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyChildProcessError&gt; for Py&lt;PyChildProcessError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyConnectionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyConnectionError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyConnectionError&gt; for Py&lt;PyConnectionError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyConnectionAbortedError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyConnectionAbortedError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyConnectionAbortedError&gt; for Py&lt;PyConnectionAbortedError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyConnectionRefusedError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyConnectionRefusedError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyConnectionRefusedError&gt; for Py&lt;PyConnectionRefusedError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyConnectionResetError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyConnectionResetError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyConnectionResetError&gt; for Py&lt;PyConnectionResetError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFileExistsError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyFileExistsError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFileExistsError&gt; for Py&lt;PyFileExistsError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFileNotFoundError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyFileNotFoundError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFileNotFoundError&gt; for Py&lt;PyFileNotFoundError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyInterruptedError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyInterruptedError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyInterruptedError&gt; for Py&lt;PyInterruptedError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyIsADirectoryError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyIsADirectoryError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyIsADirectoryError&gt; for Py&lt;PyIsADirectoryError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyNotADirectoryError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyNotADirectoryError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyNotADirectoryError&gt; for Py&lt;PyNotADirectoryError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyPermissionError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyPermissionError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyPermissionError&gt; for Py&lt;PyPermissionError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyProcessLookupError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyProcessLookupError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyProcessLookupError&gt; for Py&lt;PyProcessLookupError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyTimeoutError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyTimeoutError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyTimeoutError&gt; for Py&lt;PyTimeoutError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyEnvironmentError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyEnvironmentError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyEnvironmentError&gt; for Py&lt;PyEnvironmentError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyIOError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyIOError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyIOError&gt; for Py&lt;PyIOError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ CancelledError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a CancelledError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ CancelledError&gt; for Py&lt;CancelledError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ InvalidStateError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a InvalidStateError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ InvalidStateError&gt; for Py&lt;InvalidStateError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ TimeoutError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a TimeoutError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ TimeoutError&gt; for Py&lt;TimeoutError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ IncompleteReadError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a IncompleteReadError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ IncompleteReadError&gt; for Py&lt;IncompleteReadError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ LimitOverrunError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a LimitOverrunError&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ LimitOverrunError&gt; for Py&lt;LimitOverrunError&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ QueueEmpty&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a QueueEmpty&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ QueueEmpty&gt; for Py&lt;QueueEmpty&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ QueueFull&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a QueueFull&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ QueueFull&gt; for Py&lt;QueueFull&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ herror&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a herror&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ herror&gt; for Py&lt;herror&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ gaierror&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a gaierror&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ gaierror&gt; for Py&lt;gaierror&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ timeout&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a timeout&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ timeout&gt; for Py&lt;timeout&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; From&lt;&amp;'_ T&gt; for PyObject <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsPyPointer + PyNativeType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Py&lt;T&gt;&gt; for PyObject <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsRef&lt;PyAny&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, '_&gt; From&lt;&amp;'_ PyCell&lt;T&gt;&gt; for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;PyRef&lt;'a, T&gt;&gt; for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;PyRefMut&lt;'a, T&gt;&gt; for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PanicException&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PanicException&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PanicException&gt; for Py&lt;PanicException&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;PyBorrowError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl From&lt;PyBorrowMutError&gt; for PyErr","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for PyClassInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BaseType: PyTypeInfo&lt;Initializer = PyNativeTypeInitializer&lt;T::BaseType&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, B&gt; From&lt;(S, B)&gt; for PyClassInitializer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: PyClass + PyTypeInfo&lt;BaseType = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::BaseLayout: PySizedLayout&lt;B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: PyClass + PyTypeInfo&lt;Initializer = PyClassInitializer&lt;B&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::BaseType: PyTypeInfo&lt;Initializer = PyNativeTypeInitializer&lt;B::BaseType&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyBool&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBool&gt; for Py&lt;PyBool&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyByteArray&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyByteArray&gt; for Py&lt;PyByteArray&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyBytes&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyBytes&gt; for Py&lt;PyBytes&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyComplex&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyComplex&gt; for Py&lt;PyComplex&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyDate&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyDate&gt; for Py&lt;PyDate&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyDateTime&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyDateTime&gt; for Py&lt;PyDateTime&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyTime&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyTime&gt; for Py&lt;PyTime&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyTzInfo&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyTzInfo&gt; for Py&lt;PyTzInfo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyDelta&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyDelta&gt; for Py&lt;PyDelta&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyDict&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyDict&gt; for Py&lt;PyDict&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyFloat&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFloat&gt; for Py&lt;PyFloat&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyCFunction&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyCFunction&gt; for Py&lt;PyCFunction&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyFunction&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFunction&gt; for Py&lt;PyFunction&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyList&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyList&gt; for Py&lt;PyList&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyModule&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyModule&gt; for Py&lt;PyModule&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyLong&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyLong&gt; for Py&lt;PyLong&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PySet&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PySet&gt; for Py&lt;PySet&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyFrozenSet&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyFrozenSet&gt; for Py&lt;PyFrozenSet&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PySlice&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PySlice&gt; for Py&lt;PySlice&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyString&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyString&gt; for Py&lt;PyString&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyTuple&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyTuple&gt; for Py&lt;PyTuple&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a PyType&gt; for &amp;'a PyAny","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ PyType&gt; for Py&lt;PyType&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl From&lt;LayoutError&gt; for CollectionAllocErr","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array&gt; From&lt;&amp;'a [&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;Vec&lt;&lt;A as Array&gt;::Item&gt;&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;A&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl From&lt;SelfValue&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;SelfType&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Super&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Crate&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Extern&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Underscore&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Path&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;MetaList&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;MetaNameValue&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;Meta&gt; for NestedMeta","synthetic":false,"types":[]},{"text":"impl From&lt;Lit&gt; for NestedMeta","synthetic":false,"types":[]},{"text":"impl From&lt;FieldsNamed&gt; for Fields","synthetic":false,"types":[]},{"text":"impl From&lt;FieldsUnnamed&gt; for Fields","synthetic":false,"types":[]},{"text":"impl From&lt;VisPublic&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;VisCrate&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;VisRestricted&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;ExprArray&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAssign&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAssignOp&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAsync&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAwait&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBinary&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBlock&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBox&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBreak&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprCall&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprCast&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprClosure&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprContinue&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprField&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprForLoop&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprGroup&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprIf&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprIndex&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLet&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLit&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLoop&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMacro&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMatch&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMethodCall&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprParen&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprPath&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprRange&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprReference&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprRepeat&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprReturn&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprStruct&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTry&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTryBlock&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTuple&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprType&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprUnary&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprUnsafe&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprWhile&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprYield&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Index","synthetic":false,"types":[]},{"text":"impl From&lt;TypeParam&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;LifetimeDef&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;ConstParam&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;Ident&gt; for TypeParam","synthetic":false,"types":[]},{"text":"impl From&lt;TraitBound&gt; for TypeParamBound","synthetic":false,"types":[]},{"text":"impl From&lt;Lifetime&gt; for TypeParamBound","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateType&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateLifetime&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateEq&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;ItemConst&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemEnum&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemExternCrate&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemFn&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemForeignMod&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemImpl&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMacro&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMacro2&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMod&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStatic&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStruct&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemTrait&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemTraitAlias&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemType&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUnion&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUse&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;DeriveInput&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStruct&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;ItemEnum&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUnion&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;UsePath&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseName&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseRename&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseGlob&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseGroup&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemFn&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemStatic&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemType&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemMacro&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemConst&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemMethod&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemType&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemMacro&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemConst&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemMethod&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemType&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemMacro&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;Receiver&gt; for FnArg","synthetic":false,"types":[]},{"text":"impl From&lt;PatType&gt; for FnArg","synthetic":false,"types":[]},{"text":"impl From&lt;LitStr&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitByteStr&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitByte&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitChar&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitInt&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitFloat&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitBool&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for LitInt","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for LitFloat","synthetic":false,"types":[]},{"text":"impl From&lt;DataStruct&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;DataEnum&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;DataUnion&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;TypeArray&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeBareFn&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeGroup&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeImplTrait&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeInfer&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeMacro&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeNever&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeParen&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypePath&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypePtr&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeReference&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeSlice&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeTraitObject&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeTuple&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;PatBox&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatIdent&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatLit&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatMacro&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatOr&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatPath&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatRange&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatReference&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatRest&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatSlice&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatStruct&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatTuple&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatTupleStruct&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatType&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatWild&gt; for Pat","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Path <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;PathSegment&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for PathSegment <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Ident&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;LexError&gt; for Error","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Into&lt;Value&gt;&gt; From&lt;Vec&lt;V&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Into&lt;String&gt;, V:&nbsp;Into&lt;Value&gt;&gt; From&lt;BTreeMap&lt;S, V&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Into&lt;String&gt; + Hash + Eq, V:&nbsp;Into&lt;Value&gt;&gt; From&lt;HashMap&lt;S, V, RandomState&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Map&lt;String, Value&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()