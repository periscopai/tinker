(function() {var implementors = {};
implementors["anyhow"] = [{"text":"impl AsRef&lt;dyn Error + 'static + Sync + Send&gt; for Error","synthetic":false,"types":[]},{"text":"impl AsRef&lt;dyn Error + 'static&gt; for Error","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R, Target&gt; AsRef&lt;Target&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;Target&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;Target&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;str&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;str&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;str&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R, Target&gt; AsRef&lt;[Target]&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;[Target]&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;[Target]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["glib"] = [{"text":"impl AsRef&lt;[u8]&gt; for ByteArray","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for String","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; AsRef&lt;T&gt; for Borrowed&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for GString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for GString","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;SendUnique&gt; AsRef&lt;T&gt; for Ref&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["gstreamer"] = [{"text":"impl AsRef&lt;MessageRef&gt; for Message","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Ratio&lt;i32&gt;&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl AsRef&lt;StructureRef&gt; for Structure","synthetic":false,"types":[]},{"text":"impl AsRef&lt;CapsRef&gt; for Caps","synthetic":false,"types":[]},{"text":"impl AsRef&lt;CapsFeaturesRef&gt; for CapsFeatures","synthetic":false,"types":[]},{"text":"impl AsRef&lt;TagListRef&gt; for TagList","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;MetaAPI&gt; AsRef&lt;MetaRef&lt;'a, T&gt;&gt; for MetaRef&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;MetaAPI, U&gt; AsRef&lt;MetaRef&lt;'a, T&gt;&gt; for MetaRefMut&lt;'a, T, U&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BufferRef&gt; for Buffer","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; AsRef&lt;[u8]&gt; for BufferMap&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; AsRef&lt;[u8]&gt; for MappedBuffer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;MemoryRef&gt; for Memory","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; AsRef&lt;[u8]&gt; for MemoryMap&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; AsRef&lt;[u8]&gt; for MappedMemory&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;SampleRef&gt; for Sample","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BufferListRef&gt; for BufferList","synthetic":false,"types":[]},{"text":"impl AsRef&lt;QueryRef&gt; for Query","synthetic":false,"types":[]},{"text":"impl AsRef&lt;EventRef&gt; for Event","synthetic":false,"types":[]},{"text":"impl AsRef&lt;ContextRef&gt; for Context","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Option&lt;u64&gt;&gt; for Default","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Option&lt;u64&gt;&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Option&lt;u64&gt;&gt; for ClockTime","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Option&lt;u64&gt;&gt; for Buffers","synthetic":false,"types":[]},{"text":"impl AsRef&lt;i64&gt; for Undefined","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Option&lt;u32&gt;&gt; for Percent","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;FormattedValue&gt; AsRef&lt;FormattedSegment&lt;GenericFormattedValue&gt;&gt; for FormattedSegment&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;TocRef&gt; for Toc","synthetic":false,"types":[]},{"text":"impl AsRef&lt;TocEntryRef&gt; for TocEntry","synthetic":false,"types":[]},{"text":"impl AsRef&lt;StructureRef&gt; for BufferPoolConfig","synthetic":false,"types":[]}];
implementors["pyo3"] = [{"text":"impl AsRef&lt;PyAny&gt; for PyBaseException","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyException","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyStopAsyncIteration","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyStopIteration","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyGeneratorExit","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyArithmeticError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyLookupError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyAssertionError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyAttributeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyBufferError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyEOFError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyFloatingPointError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyOSError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyImportError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyModuleNotFoundError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyIndexError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyKeyError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyKeyboardInterrupt","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyMemoryError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyNameError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyOverflowError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyRuntimeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyRecursionError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyNotImplementedError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PySyntaxError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyReferenceError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PySystemError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PySystemExit","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyTypeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyUnboundLocalError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyUnicodeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyUnicodeDecodeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyUnicodeEncodeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyUnicodeTranslateError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyValueError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyZeroDivisionError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyBlockingIOError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyBrokenPipeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyChildProcessError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyConnectionError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyConnectionAbortedError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyConnectionRefusedError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyConnectionResetError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyFileExistsError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyFileNotFoundError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyInterruptedError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyIsADirectoryError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyNotADirectoryError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyPermissionError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyProcessLookupError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyTimeoutError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyEnvironmentError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyIOError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for CancelledError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for InvalidStateError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for TimeoutError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for IncompleteReadError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for LimitOverrunError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for QueueEmpty","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for QueueFull","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for herror","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for gaierror","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for timeout","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PanicException","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PyClass&gt; AsRef&lt;PyAny&gt; for PyCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'p, T, U&gt; AsRef&lt;U&gt; for PyRef&lt;'p, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass + PyTypeInfo&lt;BaseType = U, BaseLayout = PyCellInner&lt;U&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: PyClass,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'p, T, U&gt; AsRef&lt;U&gt; for PyRefMut&lt;'p, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PyClass + PyTypeInfo&lt;BaseType = U, BaseLayout = PyCellInner&lt;U&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: PyClass,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyBool","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyByteArray","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyBytes","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyComplex","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyDate","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyDateTime","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyTime","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyTzInfo","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyDelta","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyDict","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyFloat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyCFunction","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyFunction","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyList","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyModule","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyLong","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PySequence","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PySet","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyFrozenSet","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PySlice","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyTuple","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PyAny&gt; for PyType","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; AsRef&lt;[&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()