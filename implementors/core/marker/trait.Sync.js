(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl Sync for Prefix","synthetic":true,"types":[]},{"text":"impl Sync for Infix","synthetic":true,"types":[]},{"text":"impl Sync for Suffix","synthetic":true,"types":[]},{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Sync for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Sync for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Colour","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Sync for Stream","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !Sync for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for AppSettings","synthetic":true,"types":[]},{"text":"impl Sync for ArgSettings","synthetic":true,"types":[]},{"text":"impl Sync for Shell","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Sync for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Cancellation&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; Sync for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for LocalPool","synthetic":true,"types":[]},{"text":"impl !Sync for LocalSpawner","synthetic":true,"types":[]},{"text":"impl Sync for Enter","synthetic":true,"types":[]},{"text":"impl Sync for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Sync for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; Sync for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Sync for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Sync for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for WeakShared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Sync for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Sync for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Sync for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Sync for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Sync for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Sync for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Sync for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Sync for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Sync for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Sync for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Sync for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Sync for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Sync for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Sync for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AbortHandle","synthetic":true,"types":[]},{"text":"impl Sync for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Sync for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Sync for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Sync for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Sync for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Sync for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Sync for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Sync for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Sync for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Sync for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Sync for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Sync for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for BufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Buffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as Stream&gt;::Item as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Sync for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Sync for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Sync for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Sync for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Sync for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for TryBufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for TryBuffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Sync for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Sync for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for SelectAll&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Sync for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Sync for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Sync for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Sync for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut:&nbsp;Sync&gt; Sync for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Sync for MutexLockFuture&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Sync, '_&gt; Sync for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Sync, U:&nbsp;?Sized + Sync, '_&gt; Sync for MappedMutexGuard&lt;'_, T, U&gt;","synthetic":false,"types":[]}];
implementors["glib"] = [{"text":"impl !Sync for ByteArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for FlagsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for VariantDict","synthetic":true,"types":[]},{"text":"impl !Sync for KeyFile","synthetic":true,"types":[]},{"text":"impl Sync for FileTest","synthetic":true,"types":[]},{"text":"impl Sync for FormatSizeFlags","synthetic":true,"types":[]},{"text":"impl Sync for IOCondition","synthetic":true,"types":[]},{"text":"impl Sync for KeyFileFlags","synthetic":true,"types":[]},{"text":"impl Sync for LogLevelFlags","synthetic":true,"types":[]},{"text":"impl Sync for OptionFlags","synthetic":true,"types":[]},{"text":"impl Sync for SpawnFlags","synthetic":true,"types":[]},{"text":"impl Sync for BindingFlags","synthetic":true,"types":[]},{"text":"impl Sync for ParamFlags","synthetic":true,"types":[]},{"text":"impl Sync for SignalFlags","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SyncSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for ValueArray","synthetic":true,"types":[]},{"text":"impl Sync for Quark","synthetic":true,"types":[]},{"text":"impl Sync for LogHandlerId","synthetic":true,"types":[]},{"text":"impl Sync for LogLevels","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Sync for SourceFuture&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Sync for SourceStream&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FileError","synthetic":true,"types":[]},{"text":"impl Sync for UserDirectory","synthetic":true,"types":[]},{"text":"impl Sync for ChecksumType","synthetic":true,"types":[]},{"text":"impl Sync for DateMonth","synthetic":true,"types":[]},{"text":"impl Sync for DateWeekday","synthetic":true,"types":[]},{"text":"impl Sync for KeyFileError","synthetic":true,"types":[]},{"text":"impl Sync for OptionArg","synthetic":true,"types":[]},{"text":"impl Sync for SeekType","synthetic":true,"types":[]},{"text":"impl Sync for TimeType","synthetic":true,"types":[]},{"text":"impl Sync for LogLevel","synthetic":true,"types":[]},{"text":"impl&lt;T, MM&gt; !Sync for Boxed&lt;T, MM&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, MM&gt; !Sync for Shared&lt;T, MM&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BoolError","synthetic":true,"types":[]},{"text":"impl !Sync for ObjectRef","synthetic":true,"types":[]},{"text":"impl !Sync for Object","synthetic":true,"types":[]},{"text":"impl !Sync for InitiallyUnowned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for BindingBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Char","synthetic":true,"types":[]},{"text":"impl Sync for UChar","synthetic":true,"types":[]},{"text":"impl Sync for SignalHandlerId","synthetic":true,"types":[]},{"text":"impl Sync for Inhibit","synthetic":true,"types":[]},{"text":"impl Sync for SourceId","synthetic":true,"types":[]},{"text":"impl Sync for Continue","synthetic":true,"types":[]},{"text":"impl Sync for Priority","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, T:&nbsp;?Sized&gt; Sync for Stash&lt;'a, P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToGlibPtr&lt;'a, P&gt;&gt;::Storage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, T:&nbsp;?Sized&gt; Sync for StashMut&lt;'a, P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToGlibPtrMut&lt;'a, P&gt;&gt;::Storage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Borrowed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for List","synthetic":true,"types":[]},{"text":"impl !Sync for SList","synthetic":true,"types":[]},{"text":"impl !Sync for HashTable","synthetic":true,"types":[]},{"text":"impl !Sync for Array","synthetic":true,"types":[]},{"text":"impl !Sync for PtrArray","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for GetError","synthetic":true,"types":[]},{"text":"impl !Sync for Value","synthetic":true,"types":[]},{"text":"impl !Sync for ValueArray","synthetic":true,"types":[]},{"text":"impl !Sync for SendValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for SendUniqueCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BorrowError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for InstanceStruct&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as ObjectSubclass&gt;::ParentType as ObjectType&gt;::GlibType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ClassStruct&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as ObjectSubclass&gt;::ParentType as ObjectType&gt;::GlibClassType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for InitializingType&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SignalInvocationHint","synthetic":true,"types":[]},{"text":"impl !Sync for SignalClassHandlerToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Property&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Boxed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsClassFor&gt; Sync for ClassRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for ObjectClass","synthetic":false,"types":[]},{"text":"impl Sync for InitiallyUnownedClass","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ObjectType + Sync&gt; Sync for WeakRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ObjectType&gt; Sync for SendWeakRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Checksum","synthetic":false,"types":[]},{"text":"impl Sync for DateTime","synthetic":false,"types":[]},{"text":"impl Sync for MainContext","synthetic":false,"types":[]},{"text":"impl Sync for MainLoop","synthetic":false,"types":[]},{"text":"impl Sync for Source","synthetic":false,"types":[]},{"text":"impl Sync for TimeZone","synthetic":false,"types":[]},{"text":"impl Sync for BindingClass","synthetic":false,"types":[]},{"text":"impl Sync for Binding","synthetic":false,"types":[]},{"text":"impl Sync for Bytes","synthetic":false,"types":[]},{"text":"impl Sync for String","synthetic":false,"types":[]},{"text":"impl Sync for Closure","synthetic":false,"types":[]},{"text":"impl Sync for EnumClass","synthetic":false,"types":[]},{"text":"impl Sync for EnumValue","synthetic":false,"types":[]},{"text":"impl Sync for FlagsClass","synthetic":false,"types":[]},{"text":"impl Sync for FlagsValue","synthetic":false,"types":[]},{"text":"impl Sync for Pid","synthetic":false,"types":[]},{"text":"impl Sync for GString","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for TypedValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Variant","synthetic":false,"types":[]},{"text":"impl Sync for VariantType","synthetic":false,"types":[]},{"text":"impl Sync for VariantTy","synthetic":false,"types":[]},{"text":"impl Sync for Date","synthetic":false,"types":[]},{"text":"impl Sync for ParamSpec","synthetic":false,"types":[]},{"text":"impl Sync for TypeData","synthetic":false,"types":[]},{"text":"impl Sync for ThreadPool","synthetic":false,"types":[]}];
implementors["glib_sys"] = [{"text":"impl Sync for GPollFD","synthetic":true,"types":[]},{"text":"impl Sync for GDoubleIEEE754","synthetic":true,"types":[]},{"text":"impl Sync for GFloatIEEE754","synthetic":true,"types":[]},{"text":"impl !Sync for GArray","synthetic":true,"types":[]},{"text":"impl Sync for _GAsyncQueue","synthetic":true,"types":[]},{"text":"impl Sync for _GBookmarkFile","synthetic":true,"types":[]},{"text":"impl !Sync for GByteArray","synthetic":true,"types":[]},{"text":"impl Sync for GBytes","synthetic":true,"types":[]},{"text":"impl Sync for GChecksum","synthetic":true,"types":[]},{"text":"impl !Sync for GCond","synthetic":true,"types":[]},{"text":"impl Sync for _GData","synthetic":true,"types":[]},{"text":"impl Sync for GDate","synthetic":true,"types":[]},{"text":"impl Sync for GDateTime","synthetic":true,"types":[]},{"text":"impl !Sync for GDebugKey","synthetic":true,"types":[]},{"text":"impl Sync for _GDir","synthetic":true,"types":[]},{"text":"impl Sync for GDoubleIEEE754_mpn","synthetic":true,"types":[]},{"text":"impl !Sync for GError","synthetic":true,"types":[]},{"text":"impl Sync for GFloatIEEE754_mpn","synthetic":true,"types":[]},{"text":"impl Sync for GHashTable","synthetic":true,"types":[]},{"text":"impl !Sync for GHashTableIter","synthetic":true,"types":[]},{"text":"impl Sync for _GHmac","synthetic":true,"types":[]},{"text":"impl !Sync for GHook","synthetic":true,"types":[]},{"text":"impl !Sync for GHookList","synthetic":true,"types":[]},{"text":"impl Sync for _GIConv","synthetic":true,"types":[]},{"text":"impl !Sync for GIOChannel","synthetic":true,"types":[]},{"text":"impl Sync for GIOFuncs","synthetic":true,"types":[]},{"text":"impl Sync for GKeyFile","synthetic":true,"types":[]},{"text":"impl !Sync for GList","synthetic":true,"types":[]},{"text":"impl !Sync for GLogField","synthetic":true,"types":[]},{"text":"impl Sync for GMainContext","synthetic":true,"types":[]},{"text":"impl Sync for GMainLoop","synthetic":true,"types":[]},{"text":"impl Sync for GMappedFile","synthetic":true,"types":[]},{"text":"impl Sync for GMarkupParseContext","synthetic":true,"types":[]},{"text":"impl Sync for GMarkupParser","synthetic":true,"types":[]},{"text":"impl Sync for GMatchInfo","synthetic":true,"types":[]},{"text":"impl Sync for GMemVTable","synthetic":true,"types":[]},{"text":"impl !Sync for GNode","synthetic":true,"types":[]},{"text":"impl !Sync for GOnce","synthetic":true,"types":[]},{"text":"impl Sync for _GOptionContext","synthetic":true,"types":[]},{"text":"impl !Sync for GOptionEntry","synthetic":true,"types":[]},{"text":"impl Sync for GOptionGroup","synthetic":true,"types":[]},{"text":"impl Sync for _GPatternSpec","synthetic":true,"types":[]},{"text":"impl !Sync for GPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GPtrArray","synthetic":true,"types":[]},{"text":"impl !Sync for GQueue","synthetic":true,"types":[]},{"text":"impl !Sync for GRWLock","synthetic":true,"types":[]},{"text":"impl Sync for _GRand","synthetic":true,"types":[]},{"text":"impl !Sync for GRecMutex","synthetic":true,"types":[]},{"text":"impl Sync for GRegex","synthetic":true,"types":[]},{"text":"impl !Sync for GSList","synthetic":true,"types":[]},{"text":"impl !Sync for GScanner","synthetic":true,"types":[]},{"text":"impl !Sync for GScannerConfig","synthetic":true,"types":[]},{"text":"impl Sync for _GSequence","synthetic":true,"types":[]},{"text":"impl Sync for _GSequenceIter","synthetic":true,"types":[]},{"text":"impl !Sync for GSource","synthetic":true,"types":[]},{"text":"impl Sync for GSourceCallbackFuncs","synthetic":true,"types":[]},{"text":"impl Sync for GSourceFuncs","synthetic":true,"types":[]},{"text":"impl Sync for _GSourcePrivate","synthetic":true,"types":[]},{"text":"impl Sync for _GStatBuf","synthetic":true,"types":[]},{"text":"impl !Sync for GString","synthetic":true,"types":[]},{"text":"impl Sync for _GStringChunk","synthetic":true,"types":[]},{"text":"impl Sync for _GTestCase","synthetic":true,"types":[]},{"text":"impl Sync for GTestConfig","synthetic":true,"types":[]},{"text":"impl !Sync for GTestLogBuffer","synthetic":true,"types":[]},{"text":"impl !Sync for GTestLogMsg","synthetic":true,"types":[]},{"text":"impl Sync for _GTestSuite","synthetic":true,"types":[]},{"text":"impl Sync for GThread","synthetic":true,"types":[]},{"text":"impl !Sync for GThreadPool","synthetic":true,"types":[]},{"text":"impl Sync for GTimeVal","synthetic":true,"types":[]},{"text":"impl Sync for GTimeZone","synthetic":true,"types":[]},{"text":"impl Sync for _GTimer","synthetic":true,"types":[]},{"text":"impl !Sync for GTrashStack","synthetic":true,"types":[]},{"text":"impl Sync for _GTree","synthetic":true,"types":[]},{"text":"impl Sync for GVariant","synthetic":true,"types":[]},{"text":"impl !Sync for GVariantBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for GVariantBuilder_u_s","synthetic":true,"types":[]},{"text":"impl !Sync for GVariantDict","synthetic":true,"types":[]},{"text":"impl !Sync for GVariantDict_u_s","synthetic":true,"types":[]},{"text":"impl Sync for GVariantIter","synthetic":true,"types":[]},{"text":"impl Sync for GVariantType","synthetic":true,"types":[]},{"text":"impl !Sync for GMutex","synthetic":true,"types":[]},{"text":"impl !Sync for GTokenValue","synthetic":true,"types":[]},{"text":"impl !Sync for GVariantBuilder_u","synthetic":true,"types":[]},{"text":"impl !Sync for GVariantDict_u","synthetic":true,"types":[]}];
implementors["gobject_sys"] = [{"text":"impl Sync for GTypeCValue","synthetic":true,"types":[]},{"text":"impl Sync for GCClosure","synthetic":true,"types":[]},{"text":"impl Sync for GClosure","synthetic":true,"types":[]},{"text":"impl !Sync for GClosureNotifyData","synthetic":true,"types":[]},{"text":"impl !Sync for GEnumClass","synthetic":true,"types":[]},{"text":"impl !Sync for GEnumValue","synthetic":true,"types":[]},{"text":"impl !Sync for GFlagsClass","synthetic":true,"types":[]},{"text":"impl !Sync for GFlagsValue","synthetic":true,"types":[]},{"text":"impl !Sync for GInitiallyUnownedClass","synthetic":true,"types":[]},{"text":"impl !Sync for GInterfaceInfo","synthetic":true,"types":[]},{"text":"impl !Sync for GObjectClass","synthetic":true,"types":[]},{"text":"impl !Sync for GObjectConstructParam","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecClass","synthetic":true,"types":[]},{"text":"impl Sync for _GParamSpecPool","synthetic":true,"types":[]},{"text":"impl Sync for GParamSpecTypeInfo","synthetic":true,"types":[]},{"text":"impl !Sync for GParameter","synthetic":true,"types":[]},{"text":"impl Sync for GSignalInvocationHint","synthetic":true,"types":[]},{"text":"impl !Sync for GSignalQuery","synthetic":true,"types":[]},{"text":"impl Sync for GTypeClass","synthetic":true,"types":[]},{"text":"impl Sync for GTypeFundamentalInfo","synthetic":true,"types":[]},{"text":"impl !Sync for GTypeInfo","synthetic":true,"types":[]},{"text":"impl !Sync for GTypeInstance","synthetic":true,"types":[]},{"text":"impl Sync for GTypeInterface","synthetic":true,"types":[]},{"text":"impl !Sync for GTypeModuleClass","synthetic":true,"types":[]},{"text":"impl Sync for GTypePluginClass","synthetic":true,"types":[]},{"text":"impl !Sync for GTypeQuery","synthetic":true,"types":[]},{"text":"impl !Sync for GTypeValueTable","synthetic":true,"types":[]},{"text":"impl !Sync for GValue","synthetic":true,"types":[]},{"text":"impl !Sync for GValueArray","synthetic":true,"types":[]},{"text":"impl !Sync for GWeakRef","synthetic":true,"types":[]},{"text":"impl Sync for GBinding","synthetic":true,"types":[]},{"text":"impl !Sync for GInitiallyUnowned","synthetic":true,"types":[]},{"text":"impl !Sync for GObject","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpec","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecBoolean","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecBoxed","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecChar","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecDouble","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecEnum","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecFlags","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecFloat","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecGType","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecInt","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecInt64","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecLong","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecObject","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecOverride","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecParam","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecPointer","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecString","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecUChar","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecUInt","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecUInt64","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecULong","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecUnichar","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecValueArray","synthetic":true,"types":[]},{"text":"impl !Sync for GParamSpecVariant","synthetic":true,"types":[]},{"text":"impl !Sync for GTypeModule","synthetic":true,"types":[]},{"text":"impl Sync for GTypePlugin","synthetic":true,"types":[]},{"text":"impl !Sync for GValue_data","synthetic":true,"types":[]},{"text":"impl !Sync for GWeakRef_priv","synthetic":true,"types":[]}];
implementors["gstreamer"] = [{"text":"impl Sync for BinFlags","synthetic":true,"types":[]},{"text":"impl Sync for BufferCopyFlags","synthetic":true,"types":[]},{"text":"impl Sync for BufferFlags","synthetic":true,"types":[]},{"text":"impl Sync for BufferPoolAcquireFlags","synthetic":true,"types":[]},{"text":"impl Sync for ClockFlags","synthetic":true,"types":[]},{"text":"impl Sync for DebugColorFlags","synthetic":true,"types":[]},{"text":"impl Sync for DebugGraphDetails","synthetic":true,"types":[]},{"text":"impl Sync for ElementFlags","synthetic":true,"types":[]},{"text":"impl Sync for MemoryFlags","synthetic":true,"types":[]},{"text":"impl Sync for ObjectFlags","synthetic":true,"types":[]},{"text":"impl Sync for PadFlags","synthetic":true,"types":[]},{"text":"impl Sync for PadLinkCheck","synthetic":true,"types":[]},{"text":"impl Sync for PadProbeType","synthetic":true,"types":[]},{"text":"impl Sync for ParseFlags","synthetic":true,"types":[]},{"text":"impl Sync for PipelineFlags","synthetic":true,"types":[]},{"text":"impl Sync for PluginDependencyFlags","synthetic":true,"types":[]},{"text":"impl Sync for PluginFlags","synthetic":true,"types":[]},{"text":"impl Sync for SchedulingFlags","synthetic":true,"types":[]},{"text":"impl Sync for SeekFlags","synthetic":true,"types":[]},{"text":"impl Sync for SegmentFlags","synthetic":true,"types":[]},{"text":"impl Sync for StreamFlags","synthetic":true,"types":[]},{"text":"impl !Sync for DebugMessage","synthetic":true,"types":[]},{"text":"impl Sync for ErrorMessage","synthetic":true,"types":[]},{"text":"impl Sync for LoggableError","synthetic":true,"types":[]},{"text":"impl Sync for Fraction","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntRange&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FractionRange","synthetic":true,"types":[]},{"text":"impl Sync for Bitmask","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Array&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for List&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PadBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NotifyWatchId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for StdIterator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClockTime","synthetic":true,"types":[]},{"text":"impl Sync for DeviceMonitorFilterId","synthetic":true,"types":[]},{"text":"impl Sync for PadLinkSuccess","synthetic":true,"types":[]},{"text":"impl Sync for StateChangeError","synthetic":true,"types":[]},{"text":"impl Sync for PadProbeId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PadProbeInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TypeFind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SliceTypeFind&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AtomicClockReturn","synthetic":true,"types":[]},{"text":"impl Sync for BufferPoolConfig","synthetic":true,"types":[]},{"text":"impl Sync for BufferingMode","synthetic":true,"types":[]},{"text":"impl Sync for BusSyncReply","synthetic":true,"types":[]},{"text":"impl Sync for CapsIntersectMode","synthetic":true,"types":[]},{"text":"impl Sync for ClockEntryType","synthetic":true,"types":[]},{"text":"impl Sync for ClockReturn","synthetic":true,"types":[]},{"text":"impl Sync for ClockType","synthetic":true,"types":[]},{"text":"impl Sync for CoreError","synthetic":true,"types":[]},{"text":"impl Sync for DebugLevel","synthetic":true,"types":[]},{"text":"impl Sync for EventType","synthetic":true,"types":[]},{"text":"impl Sync for FlowReturn","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for LibraryError","synthetic":true,"types":[]},{"text":"impl Sync for PadDirection","synthetic":true,"types":[]},{"text":"impl Sync for PadLinkReturn","synthetic":true,"types":[]},{"text":"impl Sync for PadMode","synthetic":true,"types":[]},{"text":"impl Sync for PadPresence","synthetic":true,"types":[]},{"text":"impl Sync for PadProbeReturn","synthetic":true,"types":[]},{"text":"impl Sync for ParseError","synthetic":true,"types":[]},{"text":"impl Sync for PluginError","synthetic":true,"types":[]},{"text":"impl Sync for ProgressType","synthetic":true,"types":[]},{"text":"impl Sync for QOSType","synthetic":true,"types":[]},{"text":"impl Sync for Rank","synthetic":true,"types":[]},{"text":"impl Sync for ResourceError","synthetic":true,"types":[]},{"text":"impl Sync for SeekType","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for StateChange","synthetic":true,"types":[]},{"text":"impl Sync for StateChangeReturn","synthetic":true,"types":[]},{"text":"impl Sync for StreamError","synthetic":true,"types":[]},{"text":"impl Sync for StreamStatusType","synthetic":true,"types":[]},{"text":"impl Sync for StructureChangeType","synthetic":true,"types":[]},{"text":"impl Sync for TagFlag","synthetic":true,"types":[]},{"text":"impl Sync for TagMergeMode","synthetic":true,"types":[]},{"text":"impl Sync for TagScope","synthetic":true,"types":[]},{"text":"impl Sync for TaskState","synthetic":true,"types":[]},{"text":"impl Sync for TocEntryType","synthetic":true,"types":[]},{"text":"impl Sync for TocLoopType","synthetic":true,"types":[]},{"text":"impl Sync for TocScope","synthetic":true,"types":[]},{"text":"impl Sync for TypeFindProbability","synthetic":true,"types":[]},{"text":"impl Sync for URIError","synthetic":true,"types":[]},{"text":"impl Sync for URIType","synthetic":true,"types":[]},{"text":"impl Sync for MessageType","synthetic":true,"types":[]},{"text":"impl Sync for ElementMessageType","synthetic":true,"types":[]},{"text":"impl Sync for IteratorError","synthetic":true,"types":[]},{"text":"impl Sync for ClockError","synthetic":true,"types":[]},{"text":"impl Sync for ClockSuccess","synthetic":true,"types":[]},{"text":"impl Sync for FlowError","synthetic":true,"types":[]},{"text":"impl Sync for FlowSuccess","synthetic":true,"types":[]},{"text":"impl Sync for PadLinkError","synthetic":true,"types":[]},{"text":"impl Sync for StateChangeSuccess","synthetic":true,"types":[]},{"text":"impl Sync for TagError","synthetic":true,"types":[]},{"text":"impl Sync for PadGetRangeSuccess","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Eos&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Error&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Warning&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Info&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Tag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Buffering&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StateChanged&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StateDirty&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StepDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClockProvide&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClockLost&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NewClock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StructureChange&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StreamStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Application&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Element&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SegmentStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SegmentDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DurationChanged&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Latency&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for AsyncStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for AsyncDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RequestState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StepStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Qos&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Progress&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Toc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ResetTime&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StreamStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NeedContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for HaveContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DeviceAdded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DeviceRemoved&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PropertyNotify&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StreamCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StreamsSelected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Redirect&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DeviceChanged&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for EosBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for ErrorBuilder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for WarningBuilder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for InfoBuilder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TagBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for BufferingBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StateChangedBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StateDirtyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StepDoneBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ClockProvideBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ClockLostBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for NewClockBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StructureChangeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StreamStatusBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ApplicationBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SegmentStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SegmentDoneBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for DurationChangedBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for LatencyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AsyncStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AsyncDoneBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RequestStateBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StepStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for QosBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ProgressBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TocBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ResetTimeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StreamStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for NeedContextBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for HaveContextBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for DeviceAddedBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for DeviceRemovedBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MessageView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FieldIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'name&gt; Sync for GetError&lt;'name&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterFeatures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterFeaturesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Builder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BuilderFull&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NoFeature","synthetic":true,"types":[]},{"text":"impl Sync for HasFeatures","synthetic":true,"types":[]},{"text":"impl Sync for AnyFeatures","synthetic":true,"types":[]},{"text":"impl Sync for SomeFeatures","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for TagIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GenericTagIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GenericIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Title","synthetic":true,"types":[]},{"text":"impl Sync for TitleSortname","synthetic":true,"types":[]},{"text":"impl Sync for Artist","synthetic":true,"types":[]},{"text":"impl Sync for ArtistSortname","synthetic":true,"types":[]},{"text":"impl Sync for Album","synthetic":true,"types":[]},{"text":"impl Sync for AlbumSortname","synthetic":true,"types":[]},{"text":"impl Sync for AlbumArtist","synthetic":true,"types":[]},{"text":"impl Sync for AlbumArtistSortname","synthetic":true,"types":[]},{"text":"impl Sync for Date","synthetic":true,"types":[]},{"text":"impl Sync for DateTime","synthetic":true,"types":[]},{"text":"impl Sync for Genre","synthetic":true,"types":[]},{"text":"impl Sync for Comment","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedComment","synthetic":true,"types":[]},{"text":"impl Sync for TrackNumber","synthetic":true,"types":[]},{"text":"impl Sync for TrackCount","synthetic":true,"types":[]},{"text":"impl Sync for AlbumVolumeNumber","synthetic":true,"types":[]},{"text":"impl Sync for AlbumVolumeCount","synthetic":true,"types":[]},{"text":"impl Sync for Location","synthetic":true,"types":[]},{"text":"impl Sync for Homepage","synthetic":true,"types":[]},{"text":"impl Sync for Description","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for ISRC","synthetic":true,"types":[]},{"text":"impl Sync for Organization","synthetic":true,"types":[]},{"text":"impl Sync for Copyright","synthetic":true,"types":[]},{"text":"impl Sync for CopyrightUri","synthetic":true,"types":[]},{"text":"impl Sync for EncodedBy","synthetic":true,"types":[]},{"text":"impl Sync for Composer","synthetic":true,"types":[]},{"text":"impl Sync for Conductor","synthetic":true,"types":[]},{"text":"impl Sync for Contact","synthetic":true,"types":[]},{"text":"impl Sync for License","synthetic":true,"types":[]},{"text":"impl Sync for LicenseUri","synthetic":true,"types":[]},{"text":"impl Sync for Performer","synthetic":true,"types":[]},{"text":"impl Sync for Duration","synthetic":true,"types":[]},{"text":"impl Sync for Codec","synthetic":true,"types":[]},{"text":"impl Sync for VideoCodec","synthetic":true,"types":[]},{"text":"impl Sync for AudioCodec","synthetic":true,"types":[]},{"text":"impl Sync for SubtitleCodec","synthetic":true,"types":[]},{"text":"impl Sync for ContainerFormat","synthetic":true,"types":[]},{"text":"impl Sync for Bitrate","synthetic":true,"types":[]},{"text":"impl Sync for NominalBitrate","synthetic":true,"types":[]},{"text":"impl Sync for MinimumBitrate","synthetic":true,"types":[]},{"text":"impl Sync for MaximumBitrate","synthetic":true,"types":[]},{"text":"impl Sync for Serial","synthetic":true,"types":[]},{"text":"impl Sync for Encoder","synthetic":true,"types":[]},{"text":"impl Sync for EncoderVersion","synthetic":true,"types":[]},{"text":"impl Sync for TrackGain","synthetic":true,"types":[]},{"text":"impl Sync for TrackPeak","synthetic":true,"types":[]},{"text":"impl Sync for AlbumGain","synthetic":true,"types":[]},{"text":"impl Sync for AlbumPeak","synthetic":true,"types":[]},{"text":"impl Sync for ReferenceLevel","synthetic":true,"types":[]},{"text":"impl Sync for LanguageCode","synthetic":true,"types":[]},{"text":"impl Sync for LanguageName","synthetic":true,"types":[]},{"text":"impl Sync for Image","synthetic":true,"types":[]},{"text":"impl Sync for PreviewImage","synthetic":true,"types":[]},{"text":"impl Sync for Attachment","synthetic":true,"types":[]},{"text":"impl Sync for BeatsPerMinute","synthetic":true,"types":[]},{"text":"impl Sync for Keywords","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationName","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationLatitude","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationLongitute","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationElevation","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationCity","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationCountry","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationSublocation","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationHorizontalError","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationMovementDirection","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationMovementSpeed","synthetic":true,"types":[]},{"text":"impl Sync for GeoLocationCaptureDirection","synthetic":true,"types":[]},{"text":"impl Sync for ShowName","synthetic":true,"types":[]},{"text":"impl Sync for ShowSortname","synthetic":true,"types":[]},{"text":"impl Sync for ShowEpisodeNumber","synthetic":true,"types":[]},{"text":"impl Sync for ShowSeasonNumber","synthetic":true,"types":[]},{"text":"impl Sync for Lyrics","synthetic":true,"types":[]},{"text":"impl Sync for ComposerSortname","synthetic":true,"types":[]},{"text":"impl Sync for Grouping","synthetic":true,"types":[]},{"text":"impl Sync for UserRating","synthetic":true,"types":[]},{"text":"impl Sync for DeviceManufacturer","synthetic":true,"types":[]},{"text":"impl Sync for DeviceModel","synthetic":true,"types":[]},{"text":"impl Sync for ApplicationName","synthetic":true,"types":[]},{"text":"impl Sync for ApplicationData","synthetic":true,"types":[]},{"text":"impl Sync for ImageOrientation","synthetic":true,"types":[]},{"text":"impl Sync for Publisher","synthetic":true,"types":[]},{"text":"impl Sync for InterpretedBy","synthetic":true,"types":[]},{"text":"impl Sync for MidiBaseNote","synthetic":true,"types":[]},{"text":"impl Sync for PrivateData","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for MetaRef&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; Sync for MetaRefMut&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Standalone","synthetic":true,"types":[]},{"text":"impl Sync for Iterated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Readable","synthetic":true,"types":[]},{"text":"impl Sync for Writable","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Dump&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Readable","synthetic":true,"types":[]},{"text":"impl Sync for Writable","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SampleBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Duration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Latency&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Seeking&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Segment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Convert&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Formats&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Buffering&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Custom&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Uri&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Allocation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Scheduling&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AcceptCaps&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Caps&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bitrate&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Other&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for QueryView&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Seqnum","synthetic":true,"types":[]},{"text":"impl Sync for GroupId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FlushStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FlushStop&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StreamStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Caps&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Segment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StreamCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Tag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BufferSize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SinkMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StreamGroupDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Eos&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Toc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Protection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SegmentDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Gap&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Qos&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Seek&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Navigation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Latency&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Step&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Reconfigure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TocSelect&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SelectStreams&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CustomUpstream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CustomDownstream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CustomDownstreamOob&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CustomDownstreamSticky&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CustomBoth&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CustomBothOob&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for FlushStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for FlushStopBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StreamStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CapsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SegmentBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TagBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for BufferSizeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SinkMessageBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for EosBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TocBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ProtectionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SegmentDoneBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for GapBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for QosBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SeekBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for NavigationBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for LatencyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StepBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ReconfigureBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TocSelectBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CustomUpstreamBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CustomDownstreamBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CustomDownstreamOobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CustomDownstreamStickyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CustomBothBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CustomBothOobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EventView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BusStream","synthetic":true,"types":[]},{"text":"impl Sync for Undefined","synthetic":true,"types":[]},{"text":"impl Sync for Default","synthetic":true,"types":[]},{"text":"impl Sync for Bytes","synthetic":true,"types":[]},{"text":"impl Sync for Buffers","synthetic":true,"types":[]},{"text":"impl Sync for Percent","synthetic":true,"types":[]},{"text":"impl Sync for TryFromGenericFormattedValueError","synthetic":true,"types":[]},{"text":"impl Sync for TryPercentFromFloatError","synthetic":true,"types":[]},{"text":"impl Sync for GenericFormattedValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ElementInstanceStruct&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as ObjectSubclass&gt;::ParentType as ObjectType&gt;::GlibType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FlowError","synthetic":true,"types":[]},{"text":"impl Sync for AllocatorClass","synthetic":false,"types":[]},{"text":"impl Sync for Allocator","synthetic":false,"types":[]},{"text":"impl Sync for BinClass","synthetic":false,"types":[]},{"text":"impl Sync for Bin","synthetic":false,"types":[]},{"text":"impl Sync for BufferPoolClass","synthetic":false,"types":[]},{"text":"impl Sync for BufferPool","synthetic":false,"types":[]},{"text":"impl Sync for BusClass","synthetic":false,"types":[]},{"text":"impl Sync for Bus","synthetic":false,"types":[]},{"text":"impl Sync for ChildProxy","synthetic":false,"types":[]},{"text":"impl Sync for ClockClass","synthetic":false,"types":[]},{"text":"impl Sync for Clock","synthetic":false,"types":[]},{"text":"impl Sync for DeviceClass","synthetic":false,"types":[]},{"text":"impl Sync for Device","synthetic":false,"types":[]},{"text":"impl Sync for DeviceMonitorClass","synthetic":false,"types":[]},{"text":"impl Sync for DeviceMonitor","synthetic":false,"types":[]},{"text":"impl Sync for DeviceProviderClass","synthetic":false,"types":[]},{"text":"impl Sync for DeviceProvider","synthetic":false,"types":[]},{"text":"impl Sync for DeviceProviderFactoryClass","synthetic":false,"types":[]},{"text":"impl Sync for DeviceProviderFactory","synthetic":false,"types":[]},{"text":"impl Sync for ElementClass","synthetic":false,"types":[]},{"text":"impl Sync for Element","synthetic":false,"types":[]},{"text":"impl Sync for ElementFactoryClass","synthetic":false,"types":[]},{"text":"impl Sync for ElementFactory","synthetic":false,"types":[]},{"text":"impl Sync for GhostPadClass","synthetic":false,"types":[]},{"text":"impl Sync for GhostPad","synthetic":false,"types":[]},{"text":"impl Sync for ObjectClass","synthetic":false,"types":[]},{"text":"impl Sync for Object","synthetic":false,"types":[]},{"text":"impl Sync for PadClass","synthetic":false,"types":[]},{"text":"impl Sync for Pad","synthetic":false,"types":[]},{"text":"impl Sync for PadTemplateClass","synthetic":false,"types":[]},{"text":"impl Sync for PadTemplate","synthetic":false,"types":[]},{"text":"impl Sync for PipelineClass","synthetic":false,"types":[]},{"text":"impl Sync for Pipeline","synthetic":false,"types":[]},{"text":"impl Sync for PluginClass","synthetic":false,"types":[]},{"text":"impl Sync for Plugin","synthetic":false,"types":[]},{"text":"impl Sync for PluginFeatureClass","synthetic":false,"types":[]},{"text":"impl Sync for PluginFeature","synthetic":false,"types":[]},{"text":"impl Sync for Preset","synthetic":false,"types":[]},{"text":"impl Sync for ProxyPadClass","synthetic":false,"types":[]},{"text":"impl Sync for ProxyPad","synthetic":false,"types":[]},{"text":"impl Sync for RegistryClass","synthetic":false,"types":[]},{"text":"impl Sync for Registry","synthetic":false,"types":[]},{"text":"impl Sync for SystemClockClass","synthetic":false,"types":[]},{"text":"impl Sync for SystemClock","synthetic":false,"types":[]},{"text":"impl Sync for TagSetter","synthetic":false,"types":[]},{"text":"impl Sync for TocSetter","synthetic":false,"types":[]},{"text":"impl Sync for TypeFindFactoryClass","synthetic":false,"types":[]},{"text":"impl Sync for TypeFindFactory","synthetic":false,"types":[]},{"text":"impl Sync for URIHandler","synthetic":false,"types":[]},{"text":"impl Sync for DateTime","synthetic":false,"types":[]},{"text":"impl Sync for DebugCategory","synthetic":false,"types":[]},{"text":"impl Sync for DebugLogFunction","synthetic":false,"types":[]},{"text":"impl Sync for MessageRef","synthetic":false,"types":[]},{"text":"impl Sync for Message","synthetic":false,"types":[]},{"text":"impl Sync for Structure","synthetic":false,"types":[]},{"text":"impl Sync for StructureRef","synthetic":false,"types":[]},{"text":"impl Sync for CapsRef","synthetic":false,"types":[]},{"text":"impl Sync for Caps","synthetic":false,"types":[]},{"text":"impl Sync for CapsFeatures","synthetic":false,"types":[]},{"text":"impl Sync for CapsFeaturesRef","synthetic":false,"types":[]},{"text":"impl Sync for TagListRef","synthetic":false,"types":[]},{"text":"impl Sync for TagList","synthetic":false,"types":[]},{"text":"impl Sync for Meta","synthetic":false,"types":[]},{"text":"impl Sync for ParentBufferMeta","synthetic":false,"types":[]},{"text":"impl Sync for ProtectionMeta","synthetic":false,"types":[]},{"text":"impl Sync for BufferRef","synthetic":false,"types":[]},{"text":"impl Sync for Buffer","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;MetaAPI&gt; Sync for MetaIter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;MetaAPI&gt; Sync for MetaIterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for BufferMap&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for MappedBuffer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for BufferCursor&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for BufferRefCursor&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for MemoryRef","synthetic":false,"types":[]},{"text":"impl Sync for Memory","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for MemoryMap&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for MappedMemory&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for SampleRef","synthetic":false,"types":[]},{"text":"impl Sync for Sample","synthetic":false,"types":[]},{"text":"impl Sync for BufferListRef","synthetic":false,"types":[]},{"text":"impl Sync for BufferList","synthetic":false,"types":[]},{"text":"impl Sync for QueryRef","synthetic":false,"types":[]},{"text":"impl Sync for Query","synthetic":false,"types":[]},{"text":"impl Sync for EventRef","synthetic":false,"types":[]},{"text":"impl Sync for Event","synthetic":false,"types":[]},{"text":"impl Sync for ContextRef","synthetic":false,"types":[]},{"text":"impl Sync for Context","synthetic":false,"types":[]},{"text":"impl Sync for StaticCaps","synthetic":false,"types":[]},{"text":"impl Sync for StaticPadTemplate","synthetic":false,"types":[]},{"text":"impl Sync for AllocationParams","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Iterator&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sync for PadProbeData&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Sync for ParseContext","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;FormattedValue&gt; Sync for FormattedSegment&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for TocRef","synthetic":false,"types":[]},{"text":"impl Sync for Toc","synthetic":false,"types":[]},{"text":"impl Sync for TocEntryRef","synthetic":false,"types":[]},{"text":"impl Sync for TocEntry","synthetic":false,"types":[]},{"text":"impl Sync for ClockId","synthetic":false,"types":[]},{"text":"impl Sync for BufferPoolAcquireParams","synthetic":false,"types":[]}];
implementors["gstreamer_sys"] = [{"text":"impl !Sync for GstAllocationParams","synthetic":true,"types":[]},{"text":"impl !Sync for GstAllocatorClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstAllocatorPrivate","synthetic":true,"types":[]},{"text":"impl Sync for GstAtomicQueue","synthetic":true,"types":[]},{"text":"impl !Sync for GstBinClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstBinPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstBuffer","synthetic":true,"types":[]},{"text":"impl Sync for GstBufferList","synthetic":true,"types":[]},{"text":"impl !Sync for GstBufferPoolAcquireParams","synthetic":true,"types":[]},{"text":"impl !Sync for GstBufferPoolClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstBufferPoolPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstBusClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstBusPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstCaps","synthetic":true,"types":[]},{"text":"impl Sync for GstCapsFeatures","synthetic":true,"types":[]},{"text":"impl !Sync for GstChildProxyInterface","synthetic":true,"types":[]},{"text":"impl !Sync for GstClockClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstClockEntry","synthetic":true,"types":[]},{"text":"impl Sync for _GstClockPrivate","synthetic":true,"types":[]},{"text":"impl Sync for GstContext","synthetic":true,"types":[]},{"text":"impl !Sync for GstControlBindingClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstControlBindingPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstControlBinding_ABI_abi","synthetic":true,"types":[]},{"text":"impl !Sync for GstControlSourceClass","synthetic":true,"types":[]},{"text":"impl Sync for GstDateTime","synthetic":true,"types":[]},{"text":"impl !Sync for GstDebugCategory","synthetic":true,"types":[]},{"text":"impl Sync for _GstDebugMessage","synthetic":true,"types":[]},{"text":"impl !Sync for GstDeviceClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstDeviceMonitorClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstDeviceMonitorPrivate","synthetic":true,"types":[]},{"text":"impl Sync for _GstDevicePrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstDeviceProviderClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstDeviceProviderFactoryClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstDeviceProviderPrivate","synthetic":true,"types":[]},{"text":"impl Sync for _GstDynamicTypeFactoryClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstElementClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstElementFactoryClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstEvent","synthetic":true,"types":[]},{"text":"impl !Sync for GstFormatDefinition","synthetic":true,"types":[]},{"text":"impl !Sync for GstGhostPadClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstGhostPadPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstIterator","synthetic":true,"types":[]},{"text":"impl !Sync for GstMapInfo","synthetic":true,"types":[]},{"text":"impl !Sync for GstMemory","synthetic":true,"types":[]},{"text":"impl !Sync for GstMessage","synthetic":true,"types":[]},{"text":"impl !Sync for GstMeta","synthetic":true,"types":[]},{"text":"impl Sync for GstMetaInfo","synthetic":true,"types":[]},{"text":"impl Sync for GstMetaTransformCopy","synthetic":true,"types":[]},{"text":"impl !Sync for GstMiniObject","synthetic":true,"types":[]},{"text":"impl !Sync for GstObjectClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstPadClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstPadPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstPadProbeInfo","synthetic":true,"types":[]},{"text":"impl Sync for GstPadProbeInfo_ABI_abi","synthetic":true,"types":[]},{"text":"impl !Sync for GstPadTemplateClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstPadTemplate_ABI_abi","synthetic":true,"types":[]},{"text":"impl Sync for GstPad_ABI_abi","synthetic":true,"types":[]},{"text":"impl !Sync for GstParamSpecArray","synthetic":true,"types":[]},{"text":"impl !Sync for GstParamSpecFraction","synthetic":true,"types":[]},{"text":"impl !Sync for GstParentBufferMeta","synthetic":true,"types":[]},{"text":"impl Sync for GstParseContext","synthetic":true,"types":[]},{"text":"impl !Sync for GstPipelineClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstPipelinePrivate","synthetic":true,"types":[]},{"text":"impl Sync for _GstPluginClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstPluginDesc","synthetic":true,"types":[]},{"text":"impl Sync for _GstPluginFeatureClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstPoll","synthetic":true,"types":[]},{"text":"impl Sync for GstPollFD","synthetic":true,"types":[]},{"text":"impl !Sync for GstPresetInterface","synthetic":true,"types":[]},{"text":"impl !Sync for GstPromise","synthetic":true,"types":[]},{"text":"impl !Sync for GstProtectionMeta","synthetic":true,"types":[]},{"text":"impl !Sync for GstProxyPadClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstProxyPadPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstQuery","synthetic":true,"types":[]},{"text":"impl !Sync for GstReferenceTimestampMeta","synthetic":true,"types":[]},{"text":"impl !Sync for GstRegistryClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstRegistryPrivate","synthetic":true,"types":[]},{"text":"impl Sync for GstSample","synthetic":true,"types":[]},{"text":"impl !Sync for GstSegment","synthetic":true,"types":[]},{"text":"impl !Sync for GstStaticCaps","synthetic":true,"types":[]},{"text":"impl !Sync for GstStaticPadTemplate","synthetic":true,"types":[]},{"text":"impl !Sync for GstStreamClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstStreamCollectionClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstStreamCollectionPrivate","synthetic":true,"types":[]},{"text":"impl Sync for _GstStreamPrivate","synthetic":true,"types":[]},{"text":"impl Sync for GstStructure","synthetic":true,"types":[]},{"text":"impl !Sync for GstSystemClockClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstSystemClockPrivate","synthetic":true,"types":[]},{"text":"impl !Sync for GstTagList","synthetic":true,"types":[]},{"text":"impl Sync for GstTagSetterInterface","synthetic":true,"types":[]},{"text":"impl !Sync for GstTaskClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstTaskPoolClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstTaskPrivate","synthetic":true,"types":[]},{"text":"impl Sync for GstTimedValue","synthetic":true,"types":[]},{"text":"impl Sync for GstToc","synthetic":true,"types":[]},{"text":"impl Sync for GstTocEntry","synthetic":true,"types":[]},{"text":"impl Sync for GstTocSetterInterface","synthetic":true,"types":[]},{"text":"impl !Sync for GstTracerClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstTracerFactoryClass","synthetic":true,"types":[]},{"text":"impl Sync for _GstTracerPrivate","synthetic":true,"types":[]},{"text":"impl Sync for _GstTracerRecordClass","synthetic":true,"types":[]},{"text":"impl !Sync for GstTypeFind","synthetic":true,"types":[]},{"text":"impl Sync for _GstTypeFindFactoryClass","synthetic":true,"types":[]},{"text":"impl Sync for GstURIHandlerInterface","synthetic":true,"types":[]},{"text":"impl Sync for GstUri","synthetic":true,"types":[]},{"text":"impl !Sync for GstValueTable","synthetic":true,"types":[]},{"text":"impl !Sync for GstAllocator","synthetic":true,"types":[]},{"text":"impl !Sync for GstBin","synthetic":true,"types":[]},{"text":"impl Sync for GstBitmask","synthetic":true,"types":[]},{"text":"impl !Sync for GstBufferPool","synthetic":true,"types":[]},{"text":"impl !Sync for GstBus","synthetic":true,"types":[]},{"text":"impl !Sync for GstClock","synthetic":true,"types":[]},{"text":"impl !Sync for GstControlBinding","synthetic":true,"types":[]},{"text":"impl !Sync for GstControlSource","synthetic":true,"types":[]},{"text":"impl !Sync for GstDevice","synthetic":true,"types":[]},{"text":"impl !Sync for GstDeviceMonitor","synthetic":true,"types":[]},{"text":"impl !Sync for GstDeviceProvider","synthetic":true,"types":[]},{"text":"impl Sync for GstDeviceProviderFactory","synthetic":true,"types":[]},{"text":"impl Sync for GstDoubleRange","synthetic":true,"types":[]},{"text":"impl Sync for GstDynamicTypeFactory","synthetic":true,"types":[]},{"text":"impl !Sync for GstElement","synthetic":true,"types":[]},{"text":"impl Sync for GstElementFactory","synthetic":true,"types":[]},{"text":"impl Sync for GstFlagSet","synthetic":true,"types":[]},{"text":"impl Sync for GstFraction","synthetic":true,"types":[]},{"text":"impl Sync for GstFractionRange","synthetic":true,"types":[]},{"text":"impl !Sync for GstGhostPad","synthetic":true,"types":[]},{"text":"impl Sync for GstInt64Range","synthetic":true,"types":[]},{"text":"impl Sync for GstIntRange","synthetic":true,"types":[]},{"text":"impl !Sync for GstObject","synthetic":true,"types":[]},{"text":"impl !Sync for GstPad","synthetic":true,"types":[]},{"text":"impl !Sync for GstPadTemplate","synthetic":true,"types":[]},{"text":"impl Sync for GstParamArray","synthetic":true,"types":[]},{"text":"impl Sync for GstParamFraction","synthetic":true,"types":[]},{"text":"impl !Sync for GstPipeline","synthetic":true,"types":[]},{"text":"impl Sync for GstPlugin","synthetic":true,"types":[]},{"text":"impl Sync for GstPluginFeature","synthetic":true,"types":[]},{"text":"impl !Sync for GstProxyPad","synthetic":true,"types":[]},{"text":"impl !Sync for GstRegistry","synthetic":true,"types":[]},{"text":"impl !Sync for GstStream","synthetic":true,"types":[]},{"text":"impl !Sync for GstStreamCollection","synthetic":true,"types":[]},{"text":"impl !Sync for GstSystemClock","synthetic":true,"types":[]},{"text":"impl !Sync for GstTask","synthetic":true,"types":[]},{"text":"impl !Sync for GstTaskPool","synthetic":true,"types":[]},{"text":"impl !Sync for GstTracer","synthetic":true,"types":[]},{"text":"impl Sync for GstTracerFactory","synthetic":true,"types":[]},{"text":"impl Sync for GstTracerRecord","synthetic":true,"types":[]},{"text":"impl Sync for GstTypeFindFactory","synthetic":true,"types":[]},{"text":"impl Sync for GstValueArray","synthetic":true,"types":[]},{"text":"impl Sync for GstValueList","synthetic":true,"types":[]},{"text":"impl Sync for GstChildProxy","synthetic":true,"types":[]},{"text":"impl Sync for GstPreset","synthetic":true,"types":[]},{"text":"impl Sync for GstTagSetter","synthetic":true,"types":[]},{"text":"impl Sync for GstTocSetter","synthetic":true,"types":[]},{"text":"impl Sync for GstURIHandler","synthetic":true,"types":[]},{"text":"impl !Sync for GstControlBinding_ABI","synthetic":true,"types":[]},{"text":"impl !Sync for GstPadProbeInfo_ABI","synthetic":true,"types":[]},{"text":"impl !Sync for GstPadTemplate_ABI","synthetic":true,"types":[]},{"text":"impl !Sync for GstPad_ABI","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Sync for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Sync for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Sync for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Sync for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Sync for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Sync for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Sync for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Sync for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Sync for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Sync for group","synthetic":true,"types":[]},{"text":"impl Sync for utimbuf","synthetic":true,"types":[]},{"text":"impl Sync for timeval","synthetic":true,"types":[]},{"text":"impl Sync for timespec","synthetic":true,"types":[]},{"text":"impl Sync for rlimit","synthetic":true,"types":[]},{"text":"impl Sync for rusage","synthetic":true,"types":[]},{"text":"impl Sync for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Sync for hostent","synthetic":true,"types":[]},{"text":"impl !Sync for iovec","synthetic":true,"types":[]},{"text":"impl Sync for pollfd","synthetic":true,"types":[]},{"text":"impl Sync for winsize","synthetic":true,"types":[]},{"text":"impl Sync for linger","synthetic":true,"types":[]},{"text":"impl !Sync for sigval","synthetic":true,"types":[]},{"text":"impl Sync for itimerval","synthetic":true,"types":[]},{"text":"impl Sync for tms","synthetic":true,"types":[]},{"text":"impl !Sync for servent","synthetic":true,"types":[]},{"text":"impl !Sync for protoent","synthetic":true,"types":[]},{"text":"impl Sync for in_addr","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Sync for addrinfo","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Sync for fd_set","synthetic":true,"types":[]},{"text":"impl !Sync for tm","synthetic":true,"types":[]},{"text":"impl Sync for sched_param","synthetic":true,"types":[]},{"text":"impl !Sync for Dl_info","synthetic":true,"types":[]},{"text":"impl !Sync for lconv","synthetic":true,"types":[]},{"text":"impl Sync for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Sync for ifaddrs","synthetic":true,"types":[]},{"text":"impl Sync for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Sync for arpreq","synthetic":true,"types":[]},{"text":"impl Sync for arpreq_old","synthetic":true,"types":[]},{"text":"impl Sync for arphdr","synthetic":true,"types":[]},{"text":"impl !Sync for mmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for epoll_event","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Sync for utsname","synthetic":true,"types":[]},{"text":"impl !Sync for sigevent","synthetic":true,"types":[]},{"text":"impl Sync for rlimit64","synthetic":true,"types":[]},{"text":"impl !Sync for glob_t","synthetic":true,"types":[]},{"text":"impl !Sync for passwd","synthetic":true,"types":[]},{"text":"impl !Sync for spwd","synthetic":true,"types":[]},{"text":"impl Sync for dqblk","synthetic":true,"types":[]},{"text":"impl Sync for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Sync for itimerspec","synthetic":true,"types":[]},{"text":"impl Sync for fsid_t","synthetic":true,"types":[]},{"text":"impl Sync for packet_mreq","synthetic":true,"types":[]},{"text":"impl Sync for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Sync for if_nameindex","synthetic":true,"types":[]},{"text":"impl Sync for msginfo","synthetic":true,"types":[]},{"text":"impl Sync for sembuf","synthetic":true,"types":[]},{"text":"impl Sync for input_event","synthetic":true,"types":[]},{"text":"impl Sync for input_id","synthetic":true,"types":[]},{"text":"impl Sync for input_absinfo","synthetic":true,"types":[]},{"text":"impl Sync for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Sync for input_mask","synthetic":true,"types":[]},{"text":"impl Sync for ff_replay","synthetic":true,"types":[]},{"text":"impl Sync for ff_trigger","synthetic":true,"types":[]},{"text":"impl Sync for ff_envelope","synthetic":true,"types":[]},{"text":"impl Sync for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Sync for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_effect","synthetic":true,"types":[]},{"text":"impl !Sync for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for ucred","synthetic":true,"types":[]},{"text":"impl !Sync for mntent","synthetic":true,"types":[]},{"text":"impl !Sync for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Sync for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Sync for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for arpd_request","synthetic":true,"types":[]},{"text":"impl Sync for inotify_event","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_response","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Sync for regmatch_t","synthetic":true,"types":[]},{"text":"impl Sync for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Sync for dirent","synthetic":true,"types":[]},{"text":"impl Sync for dirent64","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Sync for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Sync for mq_attr","synthetic":true,"types":[]},{"text":"impl Sync for statx","synthetic":true,"types":[]},{"text":"impl Sync for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Sync for aiocb","synthetic":true,"types":[]},{"text":"impl Sync for __exit_status","synthetic":true,"types":[]},{"text":"impl Sync for __timeval","synthetic":true,"types":[]},{"text":"impl !Sync for glob64_t","synthetic":true,"types":[]},{"text":"impl !Sync for msghdr","synthetic":true,"types":[]},{"text":"impl Sync for cmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for termios","synthetic":true,"types":[]},{"text":"impl Sync for mallinfo","synthetic":true,"types":[]},{"text":"impl Sync for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Sync for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Sync for nlattr","synthetic":true,"types":[]},{"text":"impl !Sync for rtentry","synthetic":true,"types":[]},{"text":"impl Sync for timex","synthetic":true,"types":[]},{"text":"impl Sync for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Sync for regex_t","synthetic":true,"types":[]},{"text":"impl Sync for utmpx","synthetic":true,"types":[]},{"text":"impl Sync for sigset_t","synthetic":true,"types":[]},{"text":"impl Sync for sysinfo","synthetic":true,"types":[]},{"text":"impl Sync for msqid_ds","synthetic":true,"types":[]},{"text":"impl Sync for sigaction","synthetic":true,"types":[]},{"text":"impl Sync for statfs","synthetic":true,"types":[]},{"text":"impl Sync for flock","synthetic":true,"types":[]},{"text":"impl Sync for flock64","synthetic":true,"types":[]},{"text":"impl Sync for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Sync for stack_t","synthetic":true,"types":[]},{"text":"impl Sync for stat","synthetic":true,"types":[]},{"text":"impl Sync for stat64","synthetic":true,"types":[]},{"text":"impl Sync for statfs64","synthetic":true,"types":[]},{"text":"impl Sync for statvfs64","synthetic":true,"types":[]},{"text":"impl Sync for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Sync for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for user","synthetic":true,"types":[]},{"text":"impl !Sync for mcontext_t","synthetic":true,"types":[]},{"text":"impl Sync for ipc_perm","synthetic":true,"types":[]},{"text":"impl Sync for shmid_ds","synthetic":true,"types":[]},{"text":"impl Sync for termios2","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Sync for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for ucontext_t","synthetic":true,"types":[]},{"text":"impl Sync for statvfs","synthetic":true,"types":[]},{"text":"impl Sync for max_align_t","synthetic":true,"types":[]},{"text":"impl Sync for sem_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Sync for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Sync for in6_addr","synthetic":true,"types":[]},{"text":"impl Sync for DIR","synthetic":true,"types":[]},{"text":"impl Sync for FILE","synthetic":true,"types":[]},{"text":"impl Sync for fpos_t","synthetic":true,"types":[]},{"text":"impl Sync for timezone","synthetic":true,"types":[]},{"text":"impl Sync for fpos64_t","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Sync for GuardSend","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Sync for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Sync for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GuardNoSend","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync&gt; Sync for RawReentrantMutex&lt;R, G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync, T:&nbsp;?Sized + Send&gt; Sync for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Sync, T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Sync for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Sync for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Sync for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Sync for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Sync for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Sync for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F:&nbsp;Send&gt; Sync for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pai_gst_sequencer"] = [{"text":"impl Sync for PAISequencer","synthetic":true,"types":[]},{"text":"impl Sync for PAISequencerState","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Sync for Condvar","synthetic":true,"types":[]},{"text":"impl Sync for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Sync for Once","synthetic":true,"types":[]},{"text":"impl Sync for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawRwLock","synthetic":true,"types":[]},{"text":"impl Sync for RawThreadId","synthetic":true,"types":[]},{"text":"impl Sync for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Sync for ParkToken","synthetic":true,"types":[]},{"text":"impl Sync for UnparkResult","synthetic":true,"types":[]},{"text":"impl Sync for UnparkToken","synthetic":true,"types":[]},{"text":"impl Sync for SpinWait","synthetic":true,"types":[]},{"text":"impl Sync for FilterOp","synthetic":true,"types":[]},{"text":"impl Sync for ParkResult","synthetic":true,"types":[]},{"text":"impl Sync for RequeueOp","synthetic":true,"types":[]}];
implementors["pretty_hex"] = [{"text":"impl Sync for HexConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Hex&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Sync for TokenStream","synthetic":true,"types":[]},{"text":"impl !Sync for LexError","synthetic":true,"types":[]},{"text":"impl !Sync for Span","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for Punct","synthetic":true,"types":[]},{"text":"impl !Sync for Ident","synthetic":true,"types":[]},{"text":"impl !Sync for Literal","synthetic":true,"types":[]},{"text":"impl !Sync for TokenTree","synthetic":true,"types":[]},{"text":"impl Sync for Delimiter","synthetic":true,"types":[]},{"text":"impl Sync for Spacing","synthetic":true,"types":[]},{"text":"impl !Sync for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl !Sync for Diagnostic","synthetic":true,"types":[]},{"text":"impl !Sync for SpanRange","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]}];
implementors["pyo3"] = [{"text":"impl&lt;'a&gt; !Sync for PyDowncastError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for GILGuard","synthetic":true,"types":[]},{"text":"impl !Sync for GILPool","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !Sync for Python&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for PyAny","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for ReadOnlyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ElementType","synthetic":true,"types":[]},{"text":"impl Sync for PyObjectMethods","synthetic":true,"types":[]},{"text":"impl Sync for CompareOp","synthetic":true,"types":[]},{"text":"impl Sync for PyDescrMethods","synthetic":true,"types":[]},{"text":"impl Sync for PyTraverseError","synthetic":true,"types":[]},{"text":"impl Sync for PyGCMethods","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !Sync for PyVisit&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PyIterMethods","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for IterNextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for IterANextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for PyBaseException","synthetic":true,"types":[]},{"text":"impl !Sync for PyException","synthetic":true,"types":[]},{"text":"impl !Sync for PyStopAsyncIteration","synthetic":true,"types":[]},{"text":"impl !Sync for PyStopIteration","synthetic":true,"types":[]},{"text":"impl !Sync for PyGeneratorExit","synthetic":true,"types":[]},{"text":"impl !Sync for PyArithmeticError","synthetic":true,"types":[]},{"text":"impl !Sync for PyLookupError","synthetic":true,"types":[]},{"text":"impl !Sync for PyAssertionError","synthetic":true,"types":[]},{"text":"impl !Sync for PyAttributeError","synthetic":true,"types":[]},{"text":"impl !Sync for PyBufferError","synthetic":true,"types":[]},{"text":"impl !Sync for PyEOFError","synthetic":true,"types":[]},{"text":"impl !Sync for PyFloatingPointError","synthetic":true,"types":[]},{"text":"impl !Sync for PyOSError","synthetic":true,"types":[]},{"text":"impl !Sync for PyImportError","synthetic":true,"types":[]},{"text":"impl !Sync for PyModuleNotFoundError","synthetic":true,"types":[]},{"text":"impl !Sync for PyIndexError","synthetic":true,"types":[]},{"text":"impl !Sync for PyKeyError","synthetic":true,"types":[]},{"text":"impl !Sync for PyKeyboardInterrupt","synthetic":true,"types":[]},{"text":"impl !Sync for PyMemoryError","synthetic":true,"types":[]},{"text":"impl !Sync for PyNameError","synthetic":true,"types":[]},{"text":"impl !Sync for PyOverflowError","synthetic":true,"types":[]},{"text":"impl !Sync for PyRuntimeError","synthetic":true,"types":[]},{"text":"impl !Sync for PyRecursionError","synthetic":true,"types":[]},{"text":"impl !Sync for PyNotImplementedError","synthetic":true,"types":[]},{"text":"impl !Sync for PySyntaxError","synthetic":true,"types":[]},{"text":"impl !Sync for PyReferenceError","synthetic":true,"types":[]},{"text":"impl !Sync for PySystemError","synthetic":true,"types":[]},{"text":"impl !Sync for PySystemExit","synthetic":true,"types":[]},{"text":"impl !Sync for PyTypeError","synthetic":true,"types":[]},{"text":"impl !Sync for PyUnboundLocalError","synthetic":true,"types":[]},{"text":"impl !Sync for PyUnicodeError","synthetic":true,"types":[]},{"text":"impl !Sync for PyUnicodeDecodeError","synthetic":true,"types":[]},{"text":"impl !Sync for PyUnicodeEncodeError","synthetic":true,"types":[]},{"text":"impl !Sync for PyUnicodeTranslateError","synthetic":true,"types":[]},{"text":"impl !Sync for PyValueError","synthetic":true,"types":[]},{"text":"impl !Sync for PyZeroDivisionError","synthetic":true,"types":[]},{"text":"impl !Sync for PyBlockingIOError","synthetic":true,"types":[]},{"text":"impl !Sync for PyBrokenPipeError","synthetic":true,"types":[]},{"text":"impl !Sync for PyChildProcessError","synthetic":true,"types":[]},{"text":"impl !Sync for PyConnectionError","synthetic":true,"types":[]},{"text":"impl !Sync for PyConnectionAbortedError","synthetic":true,"types":[]},{"text":"impl !Sync for PyConnectionRefusedError","synthetic":true,"types":[]},{"text":"impl !Sync for PyConnectionResetError","synthetic":true,"types":[]},{"text":"impl !Sync for PyFileExistsError","synthetic":true,"types":[]},{"text":"impl !Sync for PyFileNotFoundError","synthetic":true,"types":[]},{"text":"impl !Sync for PyInterruptedError","synthetic":true,"types":[]},{"text":"impl !Sync for PyIsADirectoryError","synthetic":true,"types":[]},{"text":"impl !Sync for PyNotADirectoryError","synthetic":true,"types":[]},{"text":"impl !Sync for PyPermissionError","synthetic":true,"types":[]},{"text":"impl !Sync for PyProcessLookupError","synthetic":true,"types":[]},{"text":"impl !Sync for PyTimeoutError","synthetic":true,"types":[]},{"text":"impl !Sync for PyEnvironmentError","synthetic":true,"types":[]},{"text":"impl !Sync for PyIOError","synthetic":true,"types":[]},{"text":"impl !Sync for CancelledError","synthetic":true,"types":[]},{"text":"impl !Sync for InvalidStateError","synthetic":true,"types":[]},{"text":"impl !Sync for TimeoutError","synthetic":true,"types":[]},{"text":"impl !Sync for IncompleteReadError","synthetic":true,"types":[]},{"text":"impl !Sync for LimitOverrunError","synthetic":true,"types":[]},{"text":"impl !Sync for QueueEmpty","synthetic":true,"types":[]},{"text":"impl !Sync for QueueFull","synthetic":true,"types":[]},{"text":"impl !Sync for herror","synthetic":true,"types":[]},{"text":"impl !Sync for gaierror","synthetic":true,"types":[]},{"text":"impl !Sync for timeout","synthetic":true,"types":[]},{"text":"impl !Sync for PyCodeObject","synthetic":true,"types":[]},{"text":"impl Sync for PyFutureFeatures","synthetic":true,"types":[]},{"text":"impl Sync for Py_complex","synthetic":true,"types":[]},{"text":"impl !Sync for PyComplexObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyDateTime_Date","synthetic":true,"types":[]},{"text":"impl !Sync for PyDateTime_Time","synthetic":true,"types":[]},{"text":"impl !Sync for PyDateTime_DateTime","synthetic":true,"types":[]},{"text":"impl !Sync for PyDateTime_Delta","synthetic":true,"types":[]},{"text":"impl Sync for PyDateTimeAPI","synthetic":true,"types":[]},{"text":"impl Sync for PyDictKeysObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyDictObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyFloatObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyGenObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyListObject","synthetic":true,"types":[]},{"text":"impl Sync for PyLongObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyModuleDef_Base","synthetic":true,"types":[]},{"text":"impl !Sync for PyModuleDef_Slot","synthetic":true,"types":[]},{"text":"impl !Sync for PyModuleDef","synthetic":true,"types":[]},{"text":"impl !Sync for PyObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyVarObject","synthetic":true,"types":[]},{"text":"impl !Sync for Py_buffer","synthetic":true,"types":[]},{"text":"impl !Sync for PyNumberMethods","synthetic":true,"types":[]},{"text":"impl !Sync for PySequenceMethods","synthetic":true,"types":[]},{"text":"impl Sync for PyMappingMethods","synthetic":true,"types":[]},{"text":"impl Sync for PyAsyncMethods","synthetic":true,"types":[]},{"text":"impl Sync for PyBufferProcs","synthetic":true,"types":[]},{"text":"impl !Sync for PyTypeObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyHeapTypeObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyType_Slot","synthetic":true,"types":[]},{"text":"impl !Sync for PyType_Spec","synthetic":true,"types":[]},{"text":"impl !Sync for PyObjectArenaAllocator","synthetic":true,"types":[]},{"text":"impl !Sync for PyBaseExceptionObject","synthetic":true,"types":[]},{"text":"impl !Sync for PySyntaxErrorObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyImportErrorObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyUnicodeErrorObject","synthetic":true,"types":[]},{"text":"impl !Sync for PySystemExitObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyOSErrorObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyStopIterationObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyHash_FuncDef","synthetic":true,"types":[]},{"text":"impl !Sync for PyMemAllocatorEx","synthetic":true,"types":[]},{"text":"impl !Sync for PyInterpreterState","synthetic":true,"types":[]},{"text":"impl !Sync for PyThreadState","synthetic":true,"types":[]},{"text":"impl Sync for PyCompilerFlags","synthetic":true,"types":[]},{"text":"impl !Sync for setentry","synthetic":true,"types":[]},{"text":"impl !Sync for PySetObject","synthetic":true,"types":[]},{"text":"impl !Sync for PySliceObject","synthetic":true,"types":[]},{"text":"impl !Sync for PyStructSequence_Field","synthetic":true,"types":[]},{"text":"impl !Sync for PyStructSequence_Desc","synthetic":true,"types":[]},{"text":"impl !Sync for PyTupleObject","synthetic":true,"types":[]},{"text":"impl Sync for PyArena","synthetic":true,"types":[]},{"text":"impl Sync for PyMemAllocatorDomain","synthetic":true,"types":[]},{"text":"impl Sync for PyGILState_STATE","synthetic":true,"types":[]},{"text":"impl Sync for _mod","synthetic":true,"types":[]},{"text":"impl Sync for symtable","synthetic":true,"types":[]},{"text":"impl Sync for _node","synthetic":true,"types":[]},{"text":"impl Sync for PyWeakReference","synthetic":true,"types":[]},{"text":"impl !Sync for PyMemberDef","synthetic":true,"types":[]},{"text":"impl Sync for PyTryBlock","synthetic":true,"types":[]},{"text":"impl !Sync for PyFrameObject","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FreeList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Slot&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for PanicException","synthetic":true,"types":[]},{"text":"impl !Sync for PyModule","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for PyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !Sync for PyRef&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !Sync for PyRefMut&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PyBorrowError","synthetic":true,"types":[]},{"text":"impl Sync for PyBorrowMutError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PyNativeTypeInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PyClassInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as PyTypeInfo&gt;::BaseType as PyTypeInfo&gt;::Initializer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PyClassDummySlot","synthetic":true,"types":[]},{"text":"impl !Sync for PyClassDictSlot","synthetic":true,"types":[]},{"text":"impl !Sync for PyClassWeakRefSlot","synthetic":true,"types":[]},{"text":"impl !Sync for PyBool","synthetic":true,"types":[]},{"text":"impl !Sync for PyByteArray","synthetic":true,"types":[]},{"text":"impl !Sync for PyBytes","synthetic":true,"types":[]},{"text":"impl !Sync for PyComplex","synthetic":true,"types":[]},{"text":"impl !Sync for PyDate","synthetic":true,"types":[]},{"text":"impl !Sync for PyDateTime","synthetic":true,"types":[]},{"text":"impl !Sync for PyDelta","synthetic":true,"types":[]},{"text":"impl !Sync for PyTime","synthetic":true,"types":[]},{"text":"impl !Sync for PyTzInfo","synthetic":true,"types":[]},{"text":"impl !Sync for PyDict","synthetic":true,"types":[]},{"text":"impl !Sync for PyFloat","synthetic":true,"types":[]},{"text":"impl !Sync for PyCFunction","synthetic":true,"types":[]},{"text":"impl !Sync for PyFunction","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !Sync for PyIterator&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for PyList","synthetic":true,"types":[]},{"text":"impl !Sync for PyLong","synthetic":true,"types":[]},{"text":"impl !Sync for PySequence","synthetic":true,"types":[]},{"text":"impl !Sync for PyFrozenSet","synthetic":true,"types":[]},{"text":"impl !Sync for PySet","synthetic":true,"types":[]},{"text":"impl !Sync for PySlice","synthetic":true,"types":[]},{"text":"impl Sync for PySliceIndices","synthetic":true,"types":[]},{"text":"impl !Sync for PyString","synthetic":true,"types":[]},{"text":"impl !Sync for PyTuple","synthetic":true,"types":[]},{"text":"impl !Sync for PyType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PyBuffer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for PyMethodDef","synthetic":false,"types":[]},{"text":"impl Sync for PyGetSetDef","synthetic":false,"types":[]},{"text":"impl Sync for PyErr","synthetic":false,"types":[]},{"text":"impl Sync for PyDateTime_CAPI","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Py&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Sync for GILOnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pyo3_derive_backend"] = [{"text":"impl !Sync for PyClassArgs","synthetic":true,"types":[]},{"text":"impl !Sync for PyFunctionAttr","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Sync for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Sync for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Sync for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Sync for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Sync for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Sync for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A&gt; Sync for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync + Array&gt; Sync for Drain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["strsim"] = [{"text":"impl Sync for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Sync for Attribute","synthetic":true,"types":[]},{"text":"impl !Sync for MetaList","synthetic":true,"types":[]},{"text":"impl !Sync for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Sync for Field","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Sync for Variant","synthetic":true,"types":[]},{"text":"impl !Sync for VisCrate","synthetic":true,"types":[]},{"text":"impl !Sync for VisPublic","synthetic":true,"types":[]},{"text":"impl !Sync for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Sync for Arm","synthetic":true,"types":[]},{"text":"impl !Sync for FieldValue","synthetic":true,"types":[]},{"text":"impl !Sync for Label","synthetic":true,"types":[]},{"text":"impl !Sync for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Sync for ExprArray","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBox","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCast","synthetic":true,"types":[]},{"text":"impl !Sync for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Sync for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Sync for ExprField","synthetic":true,"types":[]},{"text":"impl !Sync for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIf","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLet","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLit","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprParen","synthetic":true,"types":[]},{"text":"impl !Sync for ExprPath","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRange","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReference","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Sync for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTry","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Sync for ExprType","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Sync for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Sync for ExprYield","synthetic":true,"types":[]},{"text":"impl !Sync for Index","synthetic":true,"types":[]},{"text":"impl !Sync for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Sync for ConstParam","synthetic":true,"types":[]},{"text":"impl !Sync for Generics","synthetic":true,"types":[]},{"text":"impl !Sync for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateType","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBound","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParam","synthetic":true,"types":[]},{"text":"impl !Sync for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Sync for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Sync for ItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Sync for ItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUse","synthetic":true,"types":[]},{"text":"impl !Sync for Receiver","synthetic":true,"types":[]},{"text":"impl !Sync for Signature","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Sync for UseGlob","synthetic":true,"types":[]},{"text":"impl !Sync for UseGroup","synthetic":true,"types":[]},{"text":"impl !Sync for UseName","synthetic":true,"types":[]},{"text":"impl !Sync for UsePath","synthetic":true,"types":[]},{"text":"impl !Sync for UseRename","synthetic":true,"types":[]},{"text":"impl !Sync for File","synthetic":true,"types":[]},{"text":"impl !Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl !Sync for LitBool","synthetic":true,"types":[]},{"text":"impl !Sync for LitByte","synthetic":true,"types":[]},{"text":"impl !Sync for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitChar","synthetic":true,"types":[]},{"text":"impl !Sync for LitFloat","synthetic":true,"types":[]},{"text":"impl !Sync for LitInt","synthetic":true,"types":[]},{"text":"impl !Sync for LitStr","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for DataEnum","synthetic":true,"types":[]},{"text":"impl !Sync for DataStruct","synthetic":true,"types":[]},{"text":"impl !Sync for DataUnion","synthetic":true,"types":[]},{"text":"impl !Sync for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Sync for Block","synthetic":true,"types":[]},{"text":"impl !Sync for Local","synthetic":true,"types":[]},{"text":"impl !Sync for Abi","synthetic":true,"types":[]},{"text":"impl !Sync for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Sync for TypeArray","synthetic":true,"types":[]},{"text":"impl !Sync for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Sync for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Sync for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Sync for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Sync for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TypeNever","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParen","synthetic":true,"types":[]},{"text":"impl !Sync for TypePath","synthetic":true,"types":[]},{"text":"impl !Sync for TypePtr","synthetic":true,"types":[]},{"text":"impl !Sync for TypeReference","synthetic":true,"types":[]},{"text":"impl !Sync for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Sync for Variadic","synthetic":true,"types":[]},{"text":"impl !Sync for FieldPat","synthetic":true,"types":[]},{"text":"impl !Sync for PatBox","synthetic":true,"types":[]},{"text":"impl !Sync for PatIdent","synthetic":true,"types":[]},{"text":"impl !Sync for PatLit","synthetic":true,"types":[]},{"text":"impl !Sync for PatMacro","synthetic":true,"types":[]},{"text":"impl !Sync for PatOr","synthetic":true,"types":[]},{"text":"impl !Sync for PatPath","synthetic":true,"types":[]},{"text":"impl !Sync for PatRange","synthetic":true,"types":[]},{"text":"impl !Sync for PatReference","synthetic":true,"types":[]},{"text":"impl !Sync for PatRest","synthetic":true,"types":[]},{"text":"impl !Sync for PatSlice","synthetic":true,"types":[]},{"text":"impl !Sync for PatStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatTuple","synthetic":true,"types":[]},{"text":"impl !Sync for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatType","synthetic":true,"types":[]},{"text":"impl !Sync for PatWild","synthetic":true,"types":[]},{"text":"impl !Sync for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Binding","synthetic":true,"types":[]},{"text":"impl !Sync for Constraint","synthetic":true,"types":[]},{"text":"impl !Sync for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Path","synthetic":true,"types":[]},{"text":"impl !Sync for PathSegment","synthetic":true,"types":[]},{"text":"impl !Sync for QSelf","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Meta","synthetic":true,"types":[]},{"text":"impl !Sync for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Sync for Fields","synthetic":true,"types":[]},{"text":"impl !Sync for Visibility","synthetic":true,"types":[]},{"text":"impl !Sync for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Sync for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Sync for Expr","synthetic":true,"types":[]},{"text":"impl !Sync for Member","synthetic":true,"types":[]},{"text":"impl !Sync for GenericParam","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Sync for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Sync for FnArg","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItem","synthetic":true,"types":[]},{"text":"impl !Sync for Item","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItem","synthetic":true,"types":[]},{"text":"impl !Sync for UseTree","synthetic":true,"types":[]},{"text":"impl !Sync for Lit","synthetic":true,"types":[]},{"text":"impl Sync for StrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Sync for Data","synthetic":true,"types":[]},{"text":"impl !Sync for BinOp","synthetic":true,"types":[]},{"text":"impl !Sync for UnOp","synthetic":true,"types":[]},{"text":"impl !Sync for Stmt","synthetic":true,"types":[]},{"text":"impl !Sync for ReturnType","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Pat","synthetic":true,"types":[]},{"text":"impl !Sync for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Sync for PathArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Underscore","synthetic":true,"types":[]},{"text":"impl !Sync for Abstract","synthetic":true,"types":[]},{"text":"impl !Sync for As","synthetic":true,"types":[]},{"text":"impl !Sync for Async","synthetic":true,"types":[]},{"text":"impl !Sync for Auto","synthetic":true,"types":[]},{"text":"impl !Sync for Await","synthetic":true,"types":[]},{"text":"impl !Sync for Become","synthetic":true,"types":[]},{"text":"impl !Sync for Box","synthetic":true,"types":[]},{"text":"impl !Sync for Break","synthetic":true,"types":[]},{"text":"impl !Sync for Const","synthetic":true,"types":[]},{"text":"impl !Sync for Continue","synthetic":true,"types":[]},{"text":"impl !Sync for Crate","synthetic":true,"types":[]},{"text":"impl !Sync for Default","synthetic":true,"types":[]},{"text":"impl !Sync for Do","synthetic":true,"types":[]},{"text":"impl !Sync for Dyn","synthetic":true,"types":[]},{"text":"impl !Sync for Else","synthetic":true,"types":[]},{"text":"impl !Sync for Enum","synthetic":true,"types":[]},{"text":"impl !Sync for Extern","synthetic":true,"types":[]},{"text":"impl !Sync for Final","synthetic":true,"types":[]},{"text":"impl !Sync for Fn","synthetic":true,"types":[]},{"text":"impl !Sync for For","synthetic":true,"types":[]},{"text":"impl !Sync for If","synthetic":true,"types":[]},{"text":"impl !Sync for Impl","synthetic":true,"types":[]},{"text":"impl !Sync for In","synthetic":true,"types":[]},{"text":"impl !Sync for Let","synthetic":true,"types":[]},{"text":"impl !Sync for Loop","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for Match","synthetic":true,"types":[]},{"text":"impl !Sync for Mod","synthetic":true,"types":[]},{"text":"impl !Sync for Move","synthetic":true,"types":[]},{"text":"impl !Sync for Mut","synthetic":true,"types":[]},{"text":"impl !Sync for Override","synthetic":true,"types":[]},{"text":"impl !Sync for Priv","synthetic":true,"types":[]},{"text":"impl !Sync for Pub","synthetic":true,"types":[]},{"text":"impl !Sync for Ref","synthetic":true,"types":[]},{"text":"impl !Sync for Return","synthetic":true,"types":[]},{"text":"impl !Sync for SelfType","synthetic":true,"types":[]},{"text":"impl !Sync for SelfValue","synthetic":true,"types":[]},{"text":"impl !Sync for Static","synthetic":true,"types":[]},{"text":"impl !Sync for Struct","synthetic":true,"types":[]},{"text":"impl !Sync for Super","synthetic":true,"types":[]},{"text":"impl !Sync for Trait","synthetic":true,"types":[]},{"text":"impl !Sync for Try","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Typeof","synthetic":true,"types":[]},{"text":"impl !Sync for Union","synthetic":true,"types":[]},{"text":"impl !Sync for Unsafe","synthetic":true,"types":[]},{"text":"impl !Sync for Unsized","synthetic":true,"types":[]},{"text":"impl !Sync for Use","synthetic":true,"types":[]},{"text":"impl !Sync for Virtual","synthetic":true,"types":[]},{"text":"impl !Sync for Where","synthetic":true,"types":[]},{"text":"impl !Sync for While","synthetic":true,"types":[]},{"text":"impl !Sync for Yield","synthetic":true,"types":[]},{"text":"impl !Sync for Add","synthetic":true,"types":[]},{"text":"impl !Sync for AddEq","synthetic":true,"types":[]},{"text":"impl !Sync for And","synthetic":true,"types":[]},{"text":"impl !Sync for AndAnd","synthetic":true,"types":[]},{"text":"impl !Sync for AndEq","synthetic":true,"types":[]},{"text":"impl !Sync for At","synthetic":true,"types":[]},{"text":"impl !Sync for Bang","synthetic":true,"types":[]},{"text":"impl !Sync for Caret","synthetic":true,"types":[]},{"text":"impl !Sync for CaretEq","synthetic":true,"types":[]},{"text":"impl !Sync for Colon","synthetic":true,"types":[]},{"text":"impl !Sync for Colon2","synthetic":true,"types":[]},{"text":"impl !Sync for Comma","synthetic":true,"types":[]},{"text":"impl !Sync for Div","synthetic":true,"types":[]},{"text":"impl !Sync for DivEq","synthetic":true,"types":[]},{"text":"impl !Sync for Dollar","synthetic":true,"types":[]},{"text":"impl !Sync for Dot","synthetic":true,"types":[]},{"text":"impl !Sync for Dot2","synthetic":true,"types":[]},{"text":"impl !Sync for Dot3","synthetic":true,"types":[]},{"text":"impl !Sync for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Sync for Eq","synthetic":true,"types":[]},{"text":"impl !Sync for EqEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ge","synthetic":true,"types":[]},{"text":"impl !Sync for Gt","synthetic":true,"types":[]},{"text":"impl !Sync for Le","synthetic":true,"types":[]},{"text":"impl !Sync for Lt","synthetic":true,"types":[]},{"text":"impl !Sync for MulEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ne","synthetic":true,"types":[]},{"text":"impl !Sync for Or","synthetic":true,"types":[]},{"text":"impl !Sync for OrEq","synthetic":true,"types":[]},{"text":"impl !Sync for OrOr","synthetic":true,"types":[]},{"text":"impl !Sync for Pound","synthetic":true,"types":[]},{"text":"impl !Sync for Question","synthetic":true,"types":[]},{"text":"impl !Sync for RArrow","synthetic":true,"types":[]},{"text":"impl !Sync for LArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Rem","synthetic":true,"types":[]},{"text":"impl !Sync for RemEq","synthetic":true,"types":[]},{"text":"impl !Sync for FatArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Semi","synthetic":true,"types":[]},{"text":"impl !Sync for Shl","synthetic":true,"types":[]},{"text":"impl !Sync for ShlEq","synthetic":true,"types":[]},{"text":"impl !Sync for Shr","synthetic":true,"types":[]},{"text":"impl !Sync for ShrEq","synthetic":true,"types":[]},{"text":"impl !Sync for Star","synthetic":true,"types":[]},{"text":"impl !Sync for Sub","synthetic":true,"types":[]},{"text":"impl !Sync for SubEq","synthetic":true,"types":[]},{"text":"impl !Sync for Tilde","synthetic":true,"types":[]},{"text":"impl !Sync for Brace","synthetic":true,"types":[]},{"text":"impl !Sync for Bracket","synthetic":true,"types":[]},{"text":"impl !Sync for Paren","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Sync for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Nothing","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl Sync for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl Sync for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Sync for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Sync for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; Sync for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Sync for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GraphemeIncomplete","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Sync for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()