(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl RefUnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalSpawner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; RefUnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; RefUnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for WeakShared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; RefUnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; RefUnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; RefUnwindSafe for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; RefUnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; RefUnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; RefUnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBuffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !RefUnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["glib"] = [{"text":"impl RefUnwindSafe for ByteArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for String","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FlagsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VariantDict","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VariantTy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VariantType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Checksum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MainContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MainLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeZone","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileTest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatSizeFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IOCondition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyFileFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevelFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptionFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpawnFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindingClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindingFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParamFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GString","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SyncSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParamSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Quark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogHandlerId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevels","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; !RefUnwindSafe for SourceFuture&lt;F, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; !RefUnwindSafe for SourceStream&lt;F, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserDirectory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChecksumType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateMonth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateWeekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyFileError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptionArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl&lt;T, MM&gt; RefUnwindSafe for Boxed&lt;T, MM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;MM: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, MM&gt; RefUnwindSafe for Shared&lt;T, MM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;MM: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ClassRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitiallyUnowned","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitiallyUnownedClass","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WeakRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendWeakRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BindingBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Char","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Closure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalHandlerId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inhibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priority","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, T:&nbsp;?Sized&gt; RefUnwindSafe for Stash&lt;'a, P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToGlibPtr&lt;'a, P&gt;&gt;::Storage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, T:&nbsp;?Sized&gt; RefUnwindSafe for StashMut&lt;'a, P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToGlibPtrMut&lt;'a, P&gt;&gt;::Storage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Borrowed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for List","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Array","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PtrArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TypedValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SendUniqueCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BorrowError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InstanceStruct&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as ObjectSubclass&gt;::ParentType as ObjectType&gt;::GlibType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ClassStruct&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as ObjectSubclass&gt;::ParentType as ObjectType&gt;::GlibClassType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InitializingType&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalInvocationHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalClassHandlerToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Property&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Boxed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["glib_sys"] = [{"text":"impl RefUnwindSafe for GPollFD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GDoubleIEEE754","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GFloatIEEE754","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GAsyncQueue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GBookmarkFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GByteArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GChecksum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GCond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GDebugKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GDoubleIEEE754_mpn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GFloatIEEE754_mpn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GHashTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GHashTableIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GHmac","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GHook","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GHookList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GIConv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GIOChannel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GIOFuncs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GKeyFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLogField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GMainContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GMainLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GMappedFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GMarkupParseContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GMarkupParser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GMatchInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GMemVTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GOnce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GOptionContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GOptionEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GOptionGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GPatternSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GPtrArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GQueue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRWLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GRand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRecMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRegex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GSList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GScanner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GScannerConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GSequence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GSequenceIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GSourceCallbackFuncs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GSourceFuncs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GSourcePrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GStatBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GStringChunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GTestCase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTestConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTestLogBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTestLogMsg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GTestSuite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GThread","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GThreadPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTimeVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTimeZone","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GTimer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTrashStack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariantBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariantBuilder_u_s","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariantDict","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariantDict_u_s","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariantIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariantType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTokenValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariantBuilder_u","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GVariantDict_u","synthetic":true,"types":[]}];
implementors["gobject_sys"] = [{"text":"impl RefUnwindSafe for GTypeCValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GCClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GClosureNotifyData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GEnumClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GEnumValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GFlagsClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GFlagsValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GInitiallyUnownedClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GInterfaceInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GObjectClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GObjectConstructParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GParamSpecPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecTypeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GSignalInvocationHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GSignalQuery","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeFundamentalInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeInstance","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeInterface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeModuleClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypePluginClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeQuery","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeValueTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GValueArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GWeakRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GBinding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GInitiallyUnowned","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecBoolean","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecBoxed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecDouble","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecGType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecInt64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecLong","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecOverride","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecPointer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecUChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecUInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecUInt64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecULong","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecUnichar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecValueArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GParamSpecVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypeModule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GTypePlugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GValue_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GWeakRef_priv","synthetic":true,"types":[]}];
implementors["gstreamer"] = [{"text":"impl RefUnwindSafe for Allocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocatorClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferPoolClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BusClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChildProxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Clock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Device","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceMonitor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceMonitorClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceProviderClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceProviderFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceProviderFactoryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Element","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementFactoryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GhostPad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GhostPadClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadTemplate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadTemplateClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pipeline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PipelineClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Plugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluginClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluginFeature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluginFeatureClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Preset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyPad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyPadClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegistryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemClock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemClockClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagSetter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TocSetter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeFindFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeFindFactoryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for URIHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferCopyFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferPoolAcquireFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugColorFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugGraphDetails","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadLinkCheck","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadProbeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PipelineFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluginDependencyFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluginFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedulingFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SegmentFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugCategory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugLogFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoggableError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fraction","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntRange&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FractionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bitmask","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Array&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for List&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CapsFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CapsFeaturesRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BufferCursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BufferRefCursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StaticCaps","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StaticPadTemplate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocationParams","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PadBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotifyWatchId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iterator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StdIterator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceMonitorFilterId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadLinkSuccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StateChangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadProbeId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PadProbeInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseContext","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeFind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SliceTypeFind&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FormattedSegment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtomicClockReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferPoolConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferPoolAcquireParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferingMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BusSyncReply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CapsIntersectMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockEntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoreError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LibraryError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadLinkReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadPresence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadProbeReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluginError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgressType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QOSType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rank","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StateChange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StateChangeReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamStatusType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StructureChangeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagMergeMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagScope","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TaskState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TocEntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TocLoopType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TocScope","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeFindProbability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for URIError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for URIType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementMessageType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IteratorError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockSuccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowSuccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadLinkError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StateChangeSuccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PadGetRangeSuccess","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PadProbeData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Eos&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Error&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Warning&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Info&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Tag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Buffering&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StateChanged&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StateDirty&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StepDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClockProvide&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClockLost&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NewClock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StructureChange&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StreamStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Application&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Element&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SegmentStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SegmentDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DurationChanged&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Latency&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AsyncStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AsyncDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RequestState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StepStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Qos&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Progress&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Toc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ResetTime&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StreamStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NeedContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HaveContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DeviceAdded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DeviceRemoved&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PropertyNotify&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StreamCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StreamsSelected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Redirect&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DeviceChanged&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for EosBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for ErrorBuilder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for WarningBuilder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for InfoBuilder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TagBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for BufferingBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StateChangedBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StateDirtyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StepDoneBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ClockProvideBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ClockLostBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for NewClockBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StructureChangeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StreamStatusBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ApplicationBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SegmentStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SegmentDoneBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DurationChangedBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LatencyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AsyncStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AsyncDoneBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RequestStateBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StepStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for QosBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ProgressBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TocBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ResetTimeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StreamStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for NeedContextBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for HaveContextBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DeviceAddedBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DeviceRemovedBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MessageView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Structure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StructureRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FieldIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'name&gt; RefUnwindSafe for GetError&lt;'name&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caps","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CapsRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterFeatures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterFeaturesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Builder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BuilderFull&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoFeature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HasFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnyFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SomeFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagListRef","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TagIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GenericTagIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GenericIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Title","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TitleSortname","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Artist","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArtistSortname","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Album","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlbumSortname","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlbumArtist","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlbumArtistSortname","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Genre","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedComment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrackNumber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrackCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlbumVolumeNumber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlbumVolumeCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Homepage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Description","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ISRC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Organization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Copyright","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyrightUri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodedBy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Composer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conductor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Contact","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for License","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LicenseUri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Performer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Codec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VideoCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubtitleCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContainerFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bitrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NominalBitrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinimumBitrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumBitrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncoderVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrackGain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrackPeak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlbumGain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlbumPeak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LanguageCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LanguageName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreviewImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attachment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BeatsPerMinute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Keywords","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationLatitude","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationLongitute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationElevation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationCity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationCountry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationSublocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationHorizontalError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationMovementDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationMovementSpeed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeoLocationCaptureDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShowName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShowSortname","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShowEpisodeNumber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShowSeasonNumber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lyrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComposerSortname","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Grouping","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserRating","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceManufacturer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceModel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApplicationName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApplicationData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageOrientation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Publisher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterpretedBy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MidiBaseNote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrivateData","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for MetaRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; RefUnwindSafe for MetaRefMut&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParentBufferMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtectionMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standalone","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Iterated","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferRef","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for BufferMap&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MappedBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for MetaIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for MetaIterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Readable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Writable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Memory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryRef","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for MemoryMap&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MappedMemory&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Dump&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Readable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Writable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sample","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SampleBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferListRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Query","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueryRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Duration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Latency&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Seeking&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Segment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Convert&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Formats&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Buffering&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Custom&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Uri&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Allocation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Scheduling&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AcceptCaps&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Caps&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bitrate&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Other&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for QueryView&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seqnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FlushStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FlushStop&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StreamStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Caps&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Segment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StreamCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Tag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BufferSize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SinkMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StreamGroupDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Eos&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Toc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Protection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SegmentDone&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Gap&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Qos&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Seek&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Navigation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Latency&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Step&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Reconfigure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TocSelect&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SelectStreams&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CustomUpstream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CustomDownstream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CustomDownstreamOob&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CustomDownstreamSticky&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CustomBoth&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CustomBothOob&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for FlushStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for FlushStopBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StreamStartBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CapsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SegmentBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TagBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for BufferSizeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SinkMessageBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for EosBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TocBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ProtectionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SegmentDoneBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for GapBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for QosBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SeekBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for NavigationBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LatencyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StepBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReconfigureBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TocSelectBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CustomUpstreamBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CustomDownstreamBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CustomDownstreamOobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CustomDownstreamStickyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CustomBothBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CustomBothOobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EventView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContextRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BusStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Undefined","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Percent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryFromGenericFormattedValueError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryPercentFromFloatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericFormattedValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Toc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TocRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TocEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TocEntryRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ElementInstanceStruct&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as ObjectSubclass&gt;::ParentType as ObjectType&gt;::GlibType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowError","synthetic":true,"types":[]}];
implementors["gstreamer_sys"] = [{"text":"impl RefUnwindSafe for GstAllocationParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstAllocatorClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstAllocatorPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstAtomicQueue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBinClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstBinPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBufferList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBufferPoolAcquireParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBufferPoolClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstBufferPoolPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBusClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstBusPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstCaps","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstCapsFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstChildProxyInterface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstClockClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstClockEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstClockPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstControlBindingClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstControlBindingPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstControlBinding_ABI_abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstControlSourceClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDebugCategory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstDebugMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDeviceClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDeviceMonitorClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstDeviceMonitorPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstDevicePrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDeviceProviderClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstDeviceProviderFactoryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstDeviceProviderPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstDynamicTypeFactoryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstElementClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstElementFactoryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstFormatDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstGhostPadClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstGhostPadPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstMapInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstMemory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstMetaInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstMetaTransformCopy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstMiniObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstObjectClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPadClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstPadPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPadProbeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPadProbeInfo_ABI_abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPadTemplateClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPadTemplate_ABI_abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPad_ABI_abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstParamSpecArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstParamSpecFraction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstParentBufferMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstParseContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPipelineClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstPipelinePrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstPluginClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPluginDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstPluginFeatureClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstPoll","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPollFD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPresetInterface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPromise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstProtectionMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstProxyPadClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstProxyPadPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstQuery","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstReferenceTimestampMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstRegistryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstRegistryPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstSample","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstStaticCaps","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstStaticPadTemplate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstStreamClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstStreamCollectionClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstStreamCollectionPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstStreamPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstStructure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstSystemClockClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstSystemClockPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTagList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTagSetterInterface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTaskClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTaskPoolClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstTaskPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTimedValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstToc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTocEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTocSetterInterface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTracerClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstTracerFactoryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstTracerPrivate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstTracerRecordClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTypeFind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _GstTypeFindFactoryClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstURIHandlerInterface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstUri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstValueTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstAllocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBitmask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBufferPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstBus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstClock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstControlBinding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstControlSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDeviceMonitor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDeviceProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDeviceProviderFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDoubleRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstDynamicTypeFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstElement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstElementFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstFlagSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstFraction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstFractionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstGhostPad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstInt64Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstIntRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPadTemplate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstParamArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstParamFraction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPipeline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPlugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPluginFeature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstProxyPad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstRegistry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstStreamCollection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstSystemClock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTaskPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTracer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTracerFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTracerRecord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTypeFindFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstValueArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstValueList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstChildProxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPreset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTagSetter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstTocSetter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstURIHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstControlBinding_ABI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPadProbeInfo_ABI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPadTemplate_ABI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GstPad_ABI","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; RefUnwindSafe for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; RefUnwindSafe for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; RefUnwindSafe for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; RefUnwindSafe for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !RefUnwindSafe for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !RefUnwindSafe for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !RefUnwindSafe for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !RefUnwindSafe for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; RefUnwindSafe for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; RefUnwindSafe for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; RefUnwindSafe for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;RefUnwindSafe + UnwindSafe&gt; RefUnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pai_gst_sequencer"] = [{"text":"impl RefUnwindSafe for PAISequencer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PAISequencerState","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]}];
implementors["pyo3"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for PyDowncastError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyErr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GILGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GILPool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !RefUnwindSafe for Python&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyAny","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PyBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadOnlyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyObjectMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDescrMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyTraverseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyGCMethods","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !RefUnwindSafe for PyVisit&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyIterMethods","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for IterNextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for IterANextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBaseException","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyException","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyStopAsyncIteration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyStopIteration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyGeneratorExit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyArithmeticError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyLookupError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyAssertionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyAttributeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBufferError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyEOFError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFloatingPointError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyOSError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyImportError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyModuleNotFoundError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyIndexError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyKeyError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyKeyboardInterrupt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyMemoryError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyNameError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyOverflowError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyRuntimeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyRecursionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyNotImplementedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySyntaxError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyReferenceError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySystemError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySystemExit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTypeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnboundLocalError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnicodeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnicodeDecodeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnicodeEncodeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnicodeTranslateError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyValueError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyZeroDivisionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBlockingIOError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBrokenPipeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyChildProcessError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyConnectionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyConnectionAbortedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyConnectionRefusedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyConnectionResetError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFileExistsError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFileNotFoundError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyInterruptedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyIsADirectoryError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyNotADirectoryError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyPermissionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyProcessLookupError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTimeoutError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyEnvironmentError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyIOError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CancelledError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InvalidStateError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TimeoutError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IncompleteReadError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LimitOverrunError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QueueEmpty","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QueueFull","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for herror","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for gaierror","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for timeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyCodeObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyFutureFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Py_complex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyComplexObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_CAPI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_DateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_Delta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTimeAPI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyGetSetDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDictKeysObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDictObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyFloatObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyGenObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyListObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyLongObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMethodDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyModuleDef_Base","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyModuleDef_Slot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyModuleDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyVarObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Py_buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyNumberMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySequenceMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMappingMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyAsyncMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyBufferProcs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyTypeObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyHeapTypeObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyType_Slot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyType_Spec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyObjectArenaAllocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyBaseExceptionObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySyntaxErrorObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyImportErrorObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyUnicodeErrorObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySystemExitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyOSErrorObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyStopIterationObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyHash_FuncDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMemAllocatorEx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyInterpreterState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyThreadState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyCompilerFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for setentry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySetObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySliceObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyStructSequence_Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyStructSequence_Desc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyTupleObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyArena","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMemAllocatorDomain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyGILState_STATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for symtable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyWeakReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMemberDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyFrameObject","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FreeList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Slot&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for GILOnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PanicException","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyModule","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for PyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !RefUnwindSafe for PyRef&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !RefUnwindSafe for PyRefMut&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyBorrowError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyBorrowMutError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PyNativeTypeInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PyClassInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as PyTypeInfo&gt;::BaseType as PyTypeInfo&gt;::Initializer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyClassDummySlot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyClassDictSlot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyClassWeakRefSlot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyByteArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBytes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyComplex","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyDate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyDateTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyDelta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTzInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyDict","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFloat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyCFunction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFunction","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !RefUnwindSafe for PyIterator&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyList","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyLong","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySequence","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFrozenSet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySliceIndices","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyType","synthetic":true,"types":[]}];
implementors["pyo3_derive_backend"] = [{"text":"impl RefUnwindSafe for PyClassArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyFunctionAttr","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl RefUnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl RefUnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; RefUnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; RefUnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()